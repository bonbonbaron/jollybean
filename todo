Design the database system in the '''...''' section at the end of append_db.py.
Write the Python representations of the GE objects
Populate the image metadata. Don't worry about anything else right now.


HASH OUT SCENE INHERITANCE DETAILS
Write local scene data to local scene row; scenes should be able to inherit though. Because I don't want to have to rewrite a battle scene for all 300 different battles in the game. So all the data in the level editor gets shunted in one of two different directions: global and local data portions of the game binary data file. My hope is that I don't have to shunt anything ever into the global area; the type of the scene should be able to access a table of scene types and inherit all the qualities it needs for itself. 

What if a scene can choose from any one of several possible backgrounds? e.g. FFVI battle scenes. Some scenes need to check global data before it gets loaded a certain way (e.g. with a choreographed conversation between two NPCs before the player is given control over his sprite. This affects the camera's initial position, available input, etc.). 

JSON Database
	I'm not entirely convinced I need this yet. But I've seen myself make lots more progress when I hack, and yet I make fewer mistakes when I plan plan plan. But it's a spectrum, not an either-or: Too much planning, and I build a gargantuan plan that intimidates me from even starting; too much hacking, and I keep having to start all over on things I didn't think through.
	
	Python checks and makes sure the relevant objects for all the above exist in the JSON database. JSON database will store the above overall mab and individual object info first, as well as the sprite data. It's easily editable by hand via Vim this way without switching over to the VNC server. There are a few different types of objects to consider for overall level encapsulation in JSON file:
		grid objects
			This must be compressed.
		sprites
		songs
		sounds
		menus
		text
		exits

C-Code Generation
	Then Python generates the C-code in both the H file and relevant C files.

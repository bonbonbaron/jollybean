
We're now developing the renderer system. We want it to parse the colormaps into 4-channel color images, not just blindly copy everything. But what's the fastest way to do this? For now, just assume the simplest and worry about performance later.
Give GUI-related systems ownership of GUI elements via ENGINE_START and ENGINE_SHUTDOWN messages and pointers preserved from sysClr().
  That's how you can easily have a game with text and no music by simply taking that system out.
Mission to clearing out error-handling:
  /all of src/data: almost
    /~ lingering strip unit test, which needs the strip util to be free from it as well
  all of src/x
  all of src/interface
Make database process run after all game objects are processed; that way we insert in bulk.
If new game object is created, make a table for it.
Think up what your database structure should be. Preferably sqlite3.

MVP 2D
~~~~~~
\x
\motion (2d)
\animation (2d)
rendering (2d)
action
controller
master
collision (2d)
timer
sound

gene editor
level pipeline
behavior pipeline
sound pipeline
midi pipeline

--- 2D GOAL REACHED

MVP 3D
~~~~~~
3d mesh compression/inflation
xforms
rendering (3d)
camera movement w/ mouse + WASD
motion (3d)
colors
lighting
textures
models
animation (3d)
shadows
collision (3d)
pre-compiled shaders
limiting vertex data sent to GPU
perma-load static points (maybe)
index points in array

3d character pipeline
3d level pipeline

--- 3D GOAL REACHED



NTH
~~~
add option to body compressor to force any given type of compression. Developer may want speed over size, or vice versa.
take advantage of anim strips' flags to decide whether to anchor dest rect to a corner, side, or center.
animated bg tiles
camera
lerping motion
accelerating motion
mirroring
planar rendering
scaling (applies to planes)
parallax
z-ordering
shaking
orbiting
rotating
text
menus
game's (jb's) build system

PROBLEMS:
=========
  NEWER:
  ======
    * the GPU doesn't appear to support colormap-based rendering, so you may need to render the colors directly to the texture atlas yourself (if you haven't already).
      you need to change all possible error checks to asserts. That way you can turn them off by defining NDEBUG before including assert.h in your baseline header file. 

    * figure out why you're using stripmap elements to put together texture atlas. Shouldn't it be sd.assembledDataA?

    * figure out how you're going to use sdP->assembledDataA in all decompression cases for xRender.

    * Replace errors with assertions. Have a sleek engine with zero impurities.

  DONE
  ====
    * Fix compiler warnings about unseen infUtil functions

  OLDER:
  ======
  See if making animation a composite gene is what's causing master not to populate shared map of source rectangles.

  Partial answer: Turns out anim strips are incrementing the src rect count to 6 instead of 2 (we want 2 for 2 entities). We need to let composite genes increment this count as well, which has to do with 
                geneHistoP->histoXElemA[i].count);

  Figure out how to make a composite gene, now called "Animation", contribute to the number of source rectangles and components in the Animation system. Then figure out how to make the shared gene called "Animation Strip" contribute to the number of mutations. Figure out how to generalize this.



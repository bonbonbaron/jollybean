#!/bin/bash

export TROVE="${HOME}/jb"

source ./scripts/ini
source ./scripts/sys
source ./scripts/game
source ./scripts/image

function lower () {
  echo $1 | sed 's/.*/\L&/'
}

# First, distribute any items dropped off in the trove.
mv ${TROVE}/*_col.png ${TROVE}/src/Collision/png 2>/dev/null
mv ${TROVE}/*.png ${TROVE}/src/Image/png 2>/dev/null
mv ${TROVE}/*.ase ${TROVE}/src/Image/ase 2>/dev/null
mv ${TROVE}/*.json ${TROVE}/src/Animation 2>/dev/null
# What's the collision pipeline? 


# Second, handle actual user arguments.
mainArg=$(lower $1)
case $mainArg in  
  game) gameExe ${*:2};;
  sys)  sysExe ${*};;
  image|img) imgExe ${*:2};;
  gene) echo "what the del";;
  build) buildExe ${*:2};;
  *) echo "jb: Command $mainArg not recognized.";;
esac

# TODO add -g argument for game to specify game; if absent, check env vars for $GAME
# TODO make sure mv'ing imgStrip output to game dir works properly
# TODO make flexible add/rm functions that can handle any gene type
# TODO add function to check for existence of gene files and gene usage; call it in add/rm functions
# TODO if conflict exists, prompt user whether to replace it. 
# TODO add -y to auto-accept replacements of conflicts
# TODO add to/remove from headers
#sed -E "/$a/s/([0-Z ]+=\s*)(\*?[0-Z ]+)(\s*[;,\n].*)/\1$b\3/g" test 

#!/bin/bash

IMAGE=Image/{ColorMap,ColorPalette,StripMap,StripSet}
PERSONALITY=personality/quirk/tree/node
INCLUDE=include
declare GAME
function new {
  mkdir -p ./$GAME/biome/seed/{genome/{blackboard,ecs_component/{$IMAGE},ecs_shared},$PERSONALITY} game/include
  echo 
}

function del {
  rm -rf ./$1
}

function img {
  python ./jollybean/_utils/imgStrip.py ${*:2}
  declare -a outputImgs=($(echo $* | sed "s/png/c/g"))
  mv ${outputImgs[*]} $GAME/biome/seed/$IMAGE
}

function sys {
  if [ $1 ]; then
    for i in ${*:1}; do
      C_FILE=./src/x${i}.c
      H_FILE=./src/include/x${i}.h
      if [ ! -f $C_FILE ]; then
        echo "creating $C_FILE..."
        sed "s/REPLACEME/$1/g" ./templates/system.c > ./src/x${i}.c
      else echo "$C_FILE already exists! Skipping..."
      fi;
      if [ ! -f $H_FILE ]; then
        echo "creating $H_FILE..."
        sed "s/REPLACEME/$1/g" ./templates/system.h > ./src/include/x${i}.h
      else echo "$H_FILE already exists! Skipping..."
      fi;
    done;
  fi;
}

#echo "${args[*]}"

if [ $1 = new ]; then new $2;
elif [ $1 = del ]; then del $2;
elif [ $1 = img ]; then 
  declare -a args=${@:2}
  img ${args[*]};
elif [ $1 = sys ]; then sys ${@:2};
fi;

# TODO reimplement StripSet inside of imgStrip.py
# TODO add -g argument for game to specify game; if absent, check env vars for $GAME
# TODO make sure mv'ing imgStrip output to game dir works properly
# TODO make flexible add/rm functions that can handle any gene type
# TODO add function to check for existence of gene files and gene usage; call it in add/rm functions
# TODO if conflict exists, prompt user whether to replace it. 
# TODO add -y to auto-accept replacements of conflicts
# TODO add to/remove from headers

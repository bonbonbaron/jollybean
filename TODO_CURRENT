The problem is, when you run the Surface test (to see if SDL works), it bombs out when allocating an SD's unpacked data. Turns out that at some point (below), there's an invalid write in sdUnpack(). We're trying to write 4 bytes into the last byte of a 9-byte block.
==32723== Memcheck, a memory error detector
==32723== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==32723== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
==32723== Command: ./o
==32723== 
==32723== Thread 2:
==32723== Invalid write of size 4
==32723==    at 0x10B35C: sdUnpack (strip.c:107)
==32723==    by 0x10AB0F: _mtGenericLoop (interface.c:39)
==32723==    by 0x4B0EE57: start_thread (pthread_create.c:442)
==32723==    by 0x4B77F9B: thread_start (clone.S:79)
==32723==  Address 0x5f11e88 is 8 bytes inside a block of size 9 alloc'd
==32723==    at 0x48850C8: malloc (vg_replace_malloc.c:381)
==32723==    by 0x10FFE7: jbAlloc (mem.c:5)
==32723==    by 0x10F96F: arrayNew (array.c:5)
==32723==    by 0x10B11B: sdUnpack (strip.c:68)
==32723==    by 0x10AB0F: _mtGenericLoop (interface.c:39)
==32723==    by 0x4B0EE57: start_thread (pthread_create.c:442)
==32723==    by 0x4B77F9B: thread_start (clone.S:79)
==32723== 

valgrind: m_mallocfree.c:303 (get_bszB_as_is): Assertion 'bszB_lo == bszB_hi' failed.
valgrind: Heap block lo/hi size mismatch: lo = 80, hi = 4294967297.
This is probably caused by your program erroneously writing past the
end of a heap block and corrupting heap metadata.  If you fix any
invalid writes reported by Memcheck, this assertion failure will
probably go away.  Please try that before reporting this as a bug.


host stacktrace:
==32723==    at 0x58040D44: show_sched_status_wrk (m_libcassert.c:406)
==32723==    by 0x58040E93: report_and_quit (m_libcassert.c:477)
==32723==    by 0x58040FFB: vgPlain_assert_fail (m_libcassert.c:543)
==32723==    by 0x5804B5D3: get_bszB_as_is (m_mallocfree.c:303)
==32723==    by 0x5804B5D3: vgPlain_describe_arena_addr (m_mallocfree.c:1597)
==32723==    by 0x58039227: vgPlain_describe_addr (m_addrinfo.c:185)
==32723==    by 0x5803790B: vgMemCheck_update_Error_extra (mc_errors.c:1185)
==32723==    by 0x5803C33F: vgPlain_maybe_record_error (m_errormgr.c:822)
==32723==    by 0x58036B03: vgMemCheck_record_address_error (mc_errors.c:765)
==32723==    by 0x1003AC4787: ???

sched status:
  running_tid=2

Thread 1: status = VgTs_Yielding (lwpid 32723)
==32723==    at 0x4B77F78: clone (clone.S:64)
==32723==    by 0x4B0EA93: create_thread (pthread_create.c:295)
==32723==    by 0x4B0F473: pthread_create@@GLIBC_2.34 (pthread_create.c:831)
==32723==    by 0x10ACB3: multiThread (interface.c:56)
==32723==    by 0x10A3AF: main (main.c:54)
client stack range: [0x1FFEFFD000 0x1FFF000FFF] client SP: 0x1FFEFFF890
valgrind stack range: [0x1002F42000 0x1003041FFF] top usage: 19776 of 1048576

Thread 2: status = VgTs_Runnable (lwpid 32727)
==32723==    at 0x488D25C: __GI_memcpy (vg_replace_strmem.c:1121)
==32723==    by 0x10B4A3: sdUnpack (strip.c:120)
==32723==    by 0x10AB0F: _mtGenericLoop (interface.c:39)
==32723==    by 0x4B0EE57: start_thread (pthread_create.c:442)
==32723==    by 0x4B77F9B: thread_start (clone.S:79)
client stack range: [0x7341000 0x7B3FFFF] client SP: 0x7B3F780
valgrind stack range: [0x1005A25000 0x1005B24FFF] top usage: 5216 of 1048576


Note: see also the FAQ in the source distribution.
It contains workarounds to several common problems.
In particular, if Valgrind aborted or crashed after
identifying problems in your program, there's a good chance
that fixing those problems will prevent Valgrind aborting or
crashing, especially if it happened in m_mallocfree.c.

If that doesn't help, please report this bug to: www.valgrind.org

In the bug report, send all the above text, the valgrind
version, and what OS and version you are using.  Thanks.


!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AnimSequence	_utils/img.py	/^class AnimSequence:$/;"	c
BBSeed	src/botox/include/bt.h	/^} BBSeed;$/;"	t	typeref:struct:__anon35
BBSeed_	src/botox/include/bt.h	8;"	d
BLACKBOARD	src/framework/include/xMain.h	/^typedef enum {ECS_COMPONENT, ECS_SHARED, BLACKBOARD} GeneClass;$/;"	e	enum:__anon22
BOTOX_DIR	Makefile	/^BOTOX_DIR        = $(SRC_DIR)botox\/$/;"	m
BOTOX_H	src/botox/include/botox.h	2;"	d
BOTOX_INCLUDES	Makefile	/^BOTOX_INCLUDES     = $(BOTOX_INC_DIR)*.h$/;"	m
BOTOX_INC_DIR	Makefile	/^BOTOX_INC_DIR     = $(BOTOX_DIR)include\/$/;"	m
BOTOX_OBJS	Makefile	/^BOTOX_OBJS   = $(BOTOX_SRC:%.c=%.o)$/;"	m
BOTOX_SRC	Makefile	/^BOTOX_SRC     = $(shell find $(BOTOX_DIR) -name "*.c") $/;"	m
BT_H	src/botox/include/bt.h	2;"	d
BTree	src/botox/include/bt.h	/^} BTree;  $/;"	t	typeref:struct:__anon37
BTreeSingleton	src/botox/include/bt.h	/^} BTreeSingleton;$/;"	t	typeref:struct:__anon38
BTreeSingleton_	src/botox/include/bt.h	99;"	d
BYTEORDER	_utils/img.py	/^BYTEORDER = "little"  # since that's the order files are written in$/;"	v
BYTEORDER	_utils/imgStrip.py	/^BYTEORDER = "little"  # since that's the order files are written in$/;"	v
Biome	src/framework/include/xMain.h	/^} Biome;$/;"	t	typeref:struct:__anon26
Biome_	src/framework/include/xMain.h	5;"	d
Blackboard	src/botox/include/bt.h	/^} Blackboard;$/;"	t	typeref:struct:__anon36
Bln	src/botox/include/data.h	/^typedef U8 Bln;   \/\/ Boolean$/;"	t
CC	Makefile	/^CC=cc$/;"	m
CFLAGS_COMMON	Makefile	/^CFLAGS_COMMON = -g -Wall \\$/;"	m
CFLAGS_FAST	Makefile	/^CFLAGS_FAST   = $(CFLAGS_COMMON) #-Ofast    #TODO: uncomment when ready for relase$/;"	m
CFLAGS_TINY	Makefile	/^CFLAGS_TINY   = $(CFLAGS_COMMON) #-Os    #TODO: uncomment when ready for relase$/;"	m
COMPLETE	src/botox/include/bt.h	/^typedef enum {READY, RUNNING, COMPLETE, FAILED, ERROR} NodeStat;$/;"	e	enum:__anon34
CTRL_A	src/xBuiltins/include/xControl.h	20;"	d
CTRL_B	src/xBuiltins/include/xControl.h	21;"	d
CTRL_DOWN	src/xBuiltins/include/xControl.h	19;"	d
CTRL_LEFT	src/xBuiltins/include/xControl.h	16;"	d
CTRL_LISTEN	src/xBuiltins/include/xControl.h	/^	CTRL_LISTEN = 1$/;"	e	enum:__anon2
CTRL_RIGHT	src/xBuiltins/include/xControl.h	17;"	d
CTRL_SELECT	src/xBuiltins/include/xControl.h	23;"	d
CTRL_START	src/xBuiltins/include/xControl.h	22;"	d
CTRL_UP	src/xBuiltins/include/xControl.h	18;"	d
Check	src/botox/include/x.h	/^} Check;$/;"	t	typeref:struct:__anon51
CheckCBP	src/botox/include/x.h	/^typedef Bln (*CheckCBP)(XHeader *xhP, void *operandP);$/;"	t
Checkers	src/botox/include/x.h	/^} Checkers;$/;"	t	typeref:struct:__anon52
Color_	src/engine/include/jbInterface.h	6;"	d
Colormap	src/xBuiltins/include/xRender.h	/^} Colormap;     \/\/ When the inflatable requires neither unpacking nor strip-mapping, go ahead and memcpy over. I can't think of any cleaner way to do it.$/;"	t	typeref:struct:__anon9
CompLocation	src/botox/include/x.h	/^} CompLocation;$/;"	t	typeref:struct:__anon49
Control	src/xBuiltins/xControl.c	/^XGetShareFuncDefUnused_(Control);$/;"	v
DATA_H	src/botox/include/data.h	2;"	d
DST_DATA_DIR	_utils/py_defs.py	/^DST_DATA_DIR = GAME_DIR + "gameData" + SEP$/;"	v
ECS_COMPONENT	src/framework/include/xMain.h	/^typedef enum {ECS_COMPONENT, ECS_SHARED, BLACKBOARD} GeneClass;$/;"	e	enum:__anon22
ECS_SHARED	src/framework/include/xMain.h	/^typedef enum {ECS_COMPONENT, ECS_SHARED, BLACKBOARD} GeneClass;$/;"	e	enum:__anon22
ENGINE_DIR	Makefile	/^ENGINE_DIR       = $(SRC_DIR)engine\/$/;"	m
ENGINE_INCLUDES	Makefile	/^ENGINE_INCLUDES    = $(ENGINE_INC_DIR)*.h$/;"	m
ENGINE_INC_DIR	Makefile	/^ENGINE_INC_DIR    = $(ENGINE_DIR)include\/$/;"	m
ENGINE_OBJS	Makefile	/^ENGINE_OBJS = $(ENGINE_SRC:%.c=%.o)$/;"	m
ENGINE_SRC	Makefile	/^ENGINE_SRC    = $(shell find $(ENGINE_DIR) -name "*.c")$/;"	m
ENUM_NAME_PREFIX	_utils/jb_enum.py	/^ENUM_NAME_PREFIX = "e"$/;"	v
ERROR	src/botox/include/bt.h	/^typedef enum {READY, RUNNING, COMPLETE, FAILED, ERROR} NodeStat;$/;"	e	enum:__anon34
E_BAD_ARGS	src/botox/include/data.h	/^	E_BAD_ARGS,$/;"	e	enum:Error
E_BAD_INDEX	src/botox/include/data.h	/^	E_BAD_INDEX,$/;"	e	enum:Error
E_BAD_KEY	src/botox/include/data.h	/^	E_BAD_KEY,$/;"	e	enum:Error
E_MAILBOX_FULL	src/botox/include/data.h	/^	E_MAILBOX_FULL$/;"	e	enum:Error
E_MSG_INVALID_CMD	src/botox/include/data.h	/^	E_MSG_INVALID_CMD,$/;"	e	enum:Error
E_MSG_TO_ECS_TYPE_MISMATCH	src/botox/include/data.h	/^	E_MSG_TO_ECS_TYPE_MISMATCH,$/;"	e	enum:Error
E_MSG_TO_ID_MISMATCH	src/botox/include/data.h	/^	E_MSG_TO_ID_MISMATCH,$/;"	e	enum:Error
E_NO_MEMORY	src/botox/include/data.h	/^	E_NO_MEMORY,$/;"	e	enum:Error
E_NULL_VAR	src/botox/include/data.h	/^	E_NULL_VAR,$/;"	e	enum:Error
E_SYS_CMP_MISMATCH	src/botox/include/data.h	/^	E_SYS_CMP_MISMATCH,$/;"	e	enum:Error
E_UNEXPECTED_DCMP_SZ	src/botox/include/data.h	/^	E_UNEXPECTED_DCMP_SZ,$/;"	e	enum:Error
E_UNSUPPORTED_PIXEL_FORMAT	src/botox/include/data.h	/^	E_UNSUPPORTED_PIXEL_FORMAT,$/;"	e	enum:Error
Entity	src/botox/include/x.h	/^typedef Key Entity;$/;"	t
EnumValPair	src/botox/include/data.h	/^} EnumValPair;$/;"	t	typeref:struct:__anon39
Error	src/botox/include/data.h	/^typedef enum Error {$/;"	g
Error	src/botox/include/data.h	/^} Error;$/;"	t	typeref:enum:Error
Event	src/engine/include/jbInterface.h	16;"	d
FAILED	src/botox/include/bt.h	/^typedef enum {READY, RUNNING, COMPLETE, FAILED, ERROR} NodeStat;$/;"	e	enum:__anon34
FLIP_DIAG	_utils/img.py	/^FLIP_DIAG = 3 << 14$/;"	v
FLIP_LR	_utils/img.py	/^FLIP_LR   = 2 << 14$/;"	v
FLIP_MASK	_utils/img.py	/^FLIP_MASK = FLIP_DIAG$/;"	v
FLIP_NONE	_utils/img.py	/^FLIP_NONE = 0$/;"	v
FLIP_UD	_utils/img.py	/^FLIP_UD   = 1 << 14$/;"	v
FRAMEWORK_DIR	Makefile	/^FRAMEWORK_DIR    = $(SRC_DIR)framework\/$/;"	m
FRAMEWORK_INCLUDES	Makefile	/^FRAMEWORK_INCLUDES = $(FRAMEWORK_INC_DIR)*.h$/;"	m
FRAMEWORK_INC_DIR	Makefile	/^FRAMEWORK_INC_DIR = $(FRAMEWORK_DIR)include\/$/;"	m
FRAMEWORK_OBJS	Makefile	/^FRAMEWORK_OBJS    = $(FRAMEWORK_SRC:%.c=%.o)$/;"	m
FRAMEWORK_SRC	Makefile	/^FRAMEWORK_SRC = $(shell find $(FRAMEWORK_DIR) -name "*.c") $/;"	m
FlagInfo	src/botox/include/data.h	/^} FlagInfo;$/;"	t	typeref:struct:__anon41
FlipSet	src/xBuiltins/include/xRender.h	/^} FlipSet;$/;"	t	typeref:struct:__anon6
Focus	src/botox/include/x.h	/^} Focus;$/;"	t	typeref:struct:_Focus
FocusFP	src/botox/include/x.h	/^typedef Error (*FocusFP)(struct _Focus *aP);$/;"	t
FocusLocation	src/botox/include/x.h	/^} FocusLocation;$/;"	t	typeref:struct:__anon50
Focus_	src/botox/include/x.h	39;"	d
GAME_DIR	_utils/py_defs.py	/^GAME_DIR = ROOT_DIR + GAME_NAME + SEP$/;"	v
GAME_NAME	_utils/py_defs.py	/^GAME_NAME = "nectar"$/;"	v
GeneClass	src/framework/include/xMain.h	/^typedef enum {ECS_COMPONENT, ECS_SHARED, BLACKBOARD} GeneClass;$/;"	t	typeref:enum:__anon22
GeneHeader	src/framework/include/xMain.h	/^} GeneHeader;$/;"	t	typeref:struct:__anon23
GeneHisto	src/framework/xMain.c	/^} GeneHisto;$/;"	t	typeref:struct:__anon14	file:
Genome	src/framework/include/xMain.h	/^} Genome;$/;"	t	typeref:struct:__anon24
Genome_	src/framework/include/xMain.h	10;"	d
Go	src/framework/xGo.c	/^XGetShareFuncDefUnused_(Go);$/;"	v
HardCodedArray	src/botox/include/data.h	/^} HardCodedArray;$/;"	t	typeref:struct:__anon40
HardCodedArray_	src/botox/include/data.h	63;"	d
HardCodedMap	src/botox/include/data.h	/^} HardCodedMap;$/;"	t	typeref:struct:__anon44
HardCodedMap_	src/botox/include/data.h	81;"	d
IDX_B	_utils/img.py	/^IDX_B                 =  2$/;"	v
IDX_B	_utils/imgStrip.py	/^IDX_B                 =  2$/;"	v
IDX_G	_utils/img.py	/^IDX_G                 =  1$/;"	v
IDX_G	_utils/imgStrip.py	/^IDX_G                 =  1$/;"	v
IDX_R	_utils/img.py	/^IDX_R                 =  0$/;"	v
IDX_R	_utils/imgStrip.py	/^IDX_R                 =  0$/;"	v
IFLAGS	Makefile	/^IFLAGS        = -I$(BOTOX_INC_DIR) -I$(FRAMEWORK_INC_DIR) -I$(X_INC_DIR) -I$(ENGINE_INC_DIR) $/;"	m
IMG_DIR_IDX_LOCATION	_utils/img.py	/^IMG_DIR_IDX_LOCATION  = 1$/;"	v
IMG_DIR_IDX_LOCATION	_utils/imgStrip.py	/^IMG_DIR_IDX_LOCATION  = 1$/;"	v
IMG_DIR_IDX_NAME	_utils/img.py	/^IMG_DIR_IDX_NAME      = 0$/;"	v
IMG_DIR_IDX_NAME	_utils/imgStrip.py	/^IMG_DIR_IDX_NAME      = 0$/;"	v
IMG_DIR_IDX_NBR_TILES	_utils/img.py	/^IMG_DIR_IDX_NBR_TILES = 2$/;"	v
IMG_DIR_IDX_NBR_TILES	_utils/imgStrip.py	/^IMG_DIR_IDX_NBR_TILES = 2$/;"	v
IS_LINUX	_utils/py_defs.py	/^    IS_LINUX = True$/;"	v
IS_WINDOWS	_utils/py_defs.py	/^    IS_WINDOWS = True$/;"	v
Image	src/xBuiltins/include/xRender.h	/^} Image; $/;"	t	typeref:struct:__anon10
Inflatable	_utils/img.py	/^class Inflatable:$/;"	c
Inflatable	_utils/imgStrip.py	/^class Inflatable:$/;"	c
Inflatable	src/botox/include/data.h	/^} Inflatable;$/;"	t	typeref:struct:__anon45
JB_	src/engine/include/jb.h	2;"	d
JB_INTERFACE	src/engine/include/jbInterface.h	2;"	d
KEY_DOWN_	src/engine/include/jbInterface.h	21;"	d
KEY_ESCAPE	src/engine/include/jbInterface.h	51;"	d
KEY_LSHIFT	src/engine/include/jbInterface.h	50;"	d
KEY_SPACE	src/engine/include/jbInterface.h	49;"	d
KEY_UP_	src/engine/include/jbInterface.h	20;"	d
KEY_a	src/engine/include/jbInterface.h	23;"	d
KEY_b	src/engine/include/jbInterface.h	24;"	d
KEY_c	src/engine/include/jbInterface.h	25;"	d
KEY_d	src/engine/include/jbInterface.h	26;"	d
KEY_e	src/engine/include/jbInterface.h	27;"	d
KEY_f	src/engine/include/jbInterface.h	28;"	d
KEY_g	src/engine/include/jbInterface.h	29;"	d
KEY_h	src/engine/include/jbInterface.h	30;"	d
KEY_i	src/engine/include/jbInterface.h	31;"	d
KEY_j	src/engine/include/jbInterface.h	32;"	d
KEY_k	src/engine/include/jbInterface.h	33;"	d
KEY_l	src/engine/include/jbInterface.h	34;"	d
KEY_m	src/engine/include/jbInterface.h	35;"	d
KEY_n	src/engine/include/jbInterface.h	36;"	d
KEY_o	src/engine/include/jbInterface.h	37;"	d
KEY_p	src/engine/include/jbInterface.h	38;"	d
KEY_q	src/engine/include/jbInterface.h	39;"	d
KEY_r	src/engine/include/jbInterface.h	40;"	d
KEY_s	src/engine/include/jbInterface.h	41;"	d
KEY_t	src/engine/include/jbInterface.h	42;"	d
KEY_u	src/engine/include/jbInterface.h	43;"	d
KEY_v	src/engine/include/jbInterface.h	44;"	d
KEY_w	src/engine/include/jbInterface.h	45;"	d
KEY_x	src/engine/include/jbInterface.h	46;"	d
KEY_y	src/engine/include/jbInterface.h	47;"	d
KEY_z	src/engine/include/jbInterface.h	48;"	d
Key	src/botox/include/data.h	/^typedef U8 Key;$/;"	t
KeyValPair	src/botox/include/data.h	/^} KeyValPair;$/;"	t	typeref:struct:__anon42
LAST_FLAG_BYTE_IDX	src/botox/include/data.h	19;"	d
LFLAGS	Makefile	/^LFLAGS        = -Wl,--gc-sections -Wl,-z,norelro \\$/;"	m
LeafNodeFuncDef_	src/botox/include/bt.h	47;"	d
MINIZ_HAS_64BIT_REGISTERS	src/botox/data.c	407;"	d	file:
MINIZ_LITTLE_ENDIAN	src/botox/data.c	402;"	d	file:
MINIZ_USE_UNALIGNED_LOADS_AND_STORES	src/botox/data.c	400;"	d	file:
MZ_CLEAR_OBJ	src/botox/data.c	529;"	d	file:
MZ_FREE	src/botox/data.c	519;"	d	file:
MZ_FREE	src/botox/data.c	523;"	d	file:
MZ_MACRO_END	src/botox/data.c	412;"	d	file:
MZ_MACRO_END	src/botox/data.c	414;"	d	file:
MZ_MALLOC	src/botox/data.c	518;"	d	file:
MZ_MALLOC	src/botox/data.c	522;"	d	file:
MZ_MAX	src/botox/data.c	527;"	d	file:
MZ_MIN	src/botox/data.c	528;"	d	file:
MZ_READ_LE16	src/botox/data.c	532;"	d	file:
MZ_READ_LE16	src/botox/data.c	535;"	d	file:
MZ_READ_LE32	src/botox/data.c	533;"	d	file:
MZ_READ_LE32	src/botox/data.c	536;"	d	file:
MZ_REALLOC	src/botox/data.c	520;"	d	file:
MZ_REALLOC	src/botox/data.c	524;"	d	file:
Mailbox	src/botox/include/data.h	/^} Mailbox;$/;"	t	typeref:struct:__anon47
Main	src/framework/xMain.c	/^XGetShareFuncDefUnused_(Main);$/;"	v
Map	src/botox/include/data.h	/^} Map;$/;"	t	typeref:struct:__anon43
Message	src/botox/include/data.h	/^} Message;  $/;"	t	typeref:struct:__anon46
NBR_COLOR_CHANNELS	_utils/img.py	/^NBR_COLOR_CHANNELS    =  3$/;"	v
NBR_COLOR_CHANNELS	_utils/imgStrip.py	/^NBR_COLOR_CHANNELS    =  3$/;"	v
NECTAR_	game/include/nectar.h	2;"	d
NECTAR_IMAGE_	game/include/nectar_image.h	2;"	d
NECTAR_NODE_	game/include/nectar_node.h	2;"	d
NECTAR_PERSONALITY_	game/include/nectar_personality.h	2;"	d
NECTAR_SEED_	game/include/nectar_seed.h	2;"	d
NO_CHILDREN	src/botox/include/bt.h	5;"	d
NO_SIBLINGS_LEFT	src/botox/include/bt.h	6;"	d
NUM_JB_ATTRS	_utils/jb_db.py	/^NUM_JB_ATTRS = len(list_attributes(tmp))$/;"	v
N_FLAG_BITS	src/botox/include/data.h	20;"	d
N_FLAG_BYTES	src/botox/include/data.h	18;"	d
Node	src/botox/include/bt.h	/^typedef struct Node {$/;"	s
Node	src/botox/include/bt.h	/^} Node;$/;"	t	typeref:struct:Node
NodeA	src/botox/include/bt.h	/^typedef struct NodeA {$/;"	s
NodeA	src/botox/include/bt.h	/^} NodeA;$/;"	t	typeref:struct:NodeA
NodeCb	src/botox/include/bt.h	/^typedef NodeStat (*NodeCb)(struct Node *rootP, struct Node *currNodeP, Blackboard *bbP, Mailbox *outboxP);  $/;"	t
NodeFuncDef_	game/biome/seed/personality/quirk/tree/node/a.c	/^NodeFuncDef_(cb1) {$/;"	f
NodeFuncDef_	game/biome/seed/personality/quirk/tree/node/b.c	/^NodeFuncDef_(cb2) {$/;"	f
NodeFuncDef_	game/biome/seed/personality/quirk/tree/node/c.c	/^NodeFuncDef_(cb3) {$/;"	f
NodeFuncDef_	game/biome/seed/personality/quirk/tree/node/d.c	/^NodeFuncDef_(cb4) {$/;"	f
NodeFuncDef_	game/biome/seed/personality/quirk/tree/node/e.c	/^NodeFuncDef_(cb5) {$/;"	f
NodeFuncDef_	src/botox/bt.c	/^NodeFuncDef_(btSelector) {$/;"	f
NodeFuncDef_	src/botox/bt.c	/^NodeFuncDef_(btSequence) {$/;"	f
NodeFuncDef_	src/botox/bt.c	/^NodeFuncDef_(btXCondition) {$/;"	f
NodeFuncDef_	src/botox/bt.c	/^static NodeFuncDef_(_nodeRun) {$/;"	f	file:
NodeFuncDef_	src/botox/include/bt.h	72;"	d
NodeStat	src/botox/include/bt.h	/^typedef enum {READY, RUNNING, COMPLETE, FAILED, ERROR} NodeStat;$/;"	t	typeref:enum:__anon34
OBJS	Makefile	/^OBJS        = $(BOTOX_OBJS) $(FRAMEWORK_OBJS) $(X_OBJS) $(ENGINE_OBJS)$/;"	m
OUTPUTFILE	Makefile	/^OUTPUTFILE  = o$/;"	m
PNG_BITDEPTH_DATA_SZ	_utils/img.py	/^PNG_BITDEPTH_DATA_SZ  = 1$/;"	v
PNG_BITDEPTH_DATA_SZ	_utils/imgStrip.py	/^PNG_BITDEPTH_DATA_SZ  = 1$/;"	v
PNG_BITDEPTH_LOCATION	_utils/img.py	/^PNG_BITDEPTH_LOCATION = 24$/;"	v
PNG_BITDEPTH_LOCATION	_utils/imgStrip.py	/^PNG_BITDEPTH_LOCATION = 24$/;"	v
PNG_IDATA_LOCATION	_utils/img.py	/^PNG_IDATA_LOCATION    = PNG_BITDEPTH_LOCATION + 8$/;"	v
PNG_IDATA_LOCATION	_utils/imgStrip.py	/^PNG_IDATA_LOCATION    = PNG_BITDEPTH_LOCATION + 8$/;"	v
PNG_IDAT_CHUNK_TYPE	_utils/img.py	/^PNG_IDAT_CHUNK_TYPE   = bytearray([73, 68, 65, 84])  $/;"	v
PNG_IDAT_CHUNK_TYPE	_utils/imgStrip.py	/^PNG_IDAT_CHUNK_TYPE   = bytearray([73, 68, 65, 84])  $/;"	v
PNG_IDAT_END	_utils/img.py	/^PNG_IDAT_END          = bytearray("IEND".encode())$/;"	v
PNG_IDAT_END	_utils/imgStrip.py	/^PNG_IDAT_END          = bytearray("IEND".encode())$/;"	v
PNG_IDAT_START	_utils/img.py	/^PNG_IDAT_START        = bytearray("IDAT".encode())$/;"	v
PNG_IDAT_START	_utils/imgStrip.py	/^PNG_IDAT_START        = bytearray("IDAT".encode())$/;"	v
PNG_IEND	_utils/img.py	/^PNG_IEND              = bytearray([0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130])$/;"	v
PNG_IEND	_utils/imgStrip.py	/^PNG_IEND              = bytearray([0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130])$/;"	v
PNG_IEND_LENGTH	_utils/img.py	/^PNG_IEND_LENGTH       = 8$/;"	v
PNG_IEND_LENGTH	_utils/imgStrip.py	/^PNG_IEND_LENGTH       = 8$/;"	v
PNG_IHDR_START	_utils/img.py	/^PNG_IHDR_START        = bytearray([0, 0, 0, 13, 73, 72, 68, 82])$/;"	v
PNG_IHDR_START	_utils/imgStrip.py	/^PNG_IHDR_START        = bytearray([0, 0, 0, 13, 73, 72, 68, 82])$/;"	v
PNG_PLTE_CHUNK_TYPE	_utils/img.py	/^PNG_PLTE_CHUNK_TYPE   = bytearray([80, 76, 84, 69])$/;"	v
PNG_PLTE_CHUNK_TYPE	_utils/imgStrip.py	/^PNG_PLTE_CHUNK_TYPE   = bytearray([80, 76, 84, 69])$/;"	v
PNG_SIGNATURE	_utils/img.py	/^PNG_SIGNATURE         = bytearray([137, 80, 78, 71, 13, 10, 26, 10])$/;"	v
PNG_SIGNATURE	_utils/imgStrip.py	/^PNG_SIGNATURE         = bytearray([137, 80, 78, 71, 13, 10, 26, 10])$/;"	v
Palette_	src/engine/include/jbInterface.h	12;"	d
Personality	src/framework/include/xGo.h	/^} Personality;$/;"	t	typeref:struct:__anon16
Personality_	src/framework/include/xGo.h	21;"	d
QUIT_	src/engine/include/jbInterface.h	18;"	d
Quirk	src/framework/include/xGo.h	/^} Quirk;$/;"	t	typeref:struct:__anon15
Quirk_	src/framework/include/xGo.h	6;"	d
READY	src/botox/include/bt.h	/^typedef enum {READY, RUNNING, COMPLETE, FAILED, ERROR} NodeStat;$/;"	e	enum:__anon34
RECT	src/xBuiltins/xRender.c	227;"	d	file:
ROOT_DIR	_utils/py_defs.py	/^ROOT_DIR = "\/home\/bonbonbaron\/games\/"$/;"	v
RUNNING	src/botox/include/bt.h	/^typedef enum {READY, RUNNING, COMPLETE, FAILED, ERROR} NodeStat;$/;"	e	enum:__anon34
Reaction	src/framework/include/xGo.h	/^} Reaction;$/;"	t	typeref:struct:__anon18
Rect_	src/engine/include/jbInterface.h	7;"	d
Renderer_	src/engine/include/jbInterface.h	10;"	d
S16	src/botox/include/data.h	/^typedef short S16;$/;"	t
S32	src/botox/include/data.h	/^typedef int S32;$/;"	t
S8	src/botox/include/data.h	/^typedef char S8;$/;"	t
SDL_CFLAGS	Makefile	/^SDL_CFLAGS    = $(shell sdl2-config --cflags)$/;"	m
SDL_LFLAGS	Makefile	/^SDL_LFLAGS    = $(shell sdl2-config --libs)$/;"	m
SEP	_utils/py_defs.py	/^    SEP = "\/"$/;"	v
SEP	_utils/py_defs.py	/^    SEP = "\\\\"$/;"	v
SRC_DATA_DIR	_utils/py_defs.py	/^SRC_DATA_DIR = GAME_DIR + "srcData" + SEP$/;"	v
SRC_DIR	Makefile	/^SRC_DIR = \/home\/$(USER)\/hack\/jollybean\/src\/$/;"	m
STRP_N_PIXELS	_utils/imgStrip.py	/^STRP_N_PIXELS = 64  # images will use 8x8 s to ensure pixel count is multiple of STRP_N_PIXELS$/;"	v
SUCCESS	src/botox/include/data.h	/^	SUCCESS,$/;"	e	enum:Error
SYS_CONTROL	src/xBuiltins/include/xControl.h	2;"	d
SYS_RENDER	src/xBuiltins/include/xRender.h	2;"	d
Seed	src/framework/include/xMain.h	/^} Seed;$/;"	t	typeref:struct:__anon25
SelectorNodeFuncDef_	src/botox/include/bt.h	55;"	d
SequenceNodeFuncDef_	src/botox/include/bt.h	63;"	d
SrcNode	src/botox/include/bt.h	/^typedef struct SrcNode {$/;"	s
SrcNode	src/botox/include/bt.h	/^} SrcNode;$/;"	t	typeref:struct:SrcNode
StripMap	_utils/imgStrip.py	/^class StripMap:$/;"	c
StripMap	src/xBuiltins/include/xRender.h	/^} StripMap;$/;"	t	typeref:struct:__anon8
StripSet	src/xBuiltins/include/xRender.h	/^} StripSet;$/;"	t	typeref:struct:__anon7
Surface_	src/engine/include/jbInterface.h	11;"	d
System	src/botox/include/x.h	/^} System;$/;"	t	typeref:struct:_System
System_	src/botox/include/x.h	21;"	d
TEST_	game/include/test.h	2;"	d
TILE_HEIGHT	_utils/img.py	/^TILE_HEIGHT           =  8$/;"	v
TILE_HEIGHT	_utils/imgStrip.py	/^TILE_HEIGHT           =  8$/;"	v
TILE_SIZE	_utils/img.py	/^TILE_SIZE = TILE_WIDTH * TILE_HEIGHT * NBR_COLOR_CHANNELS$/;"	v
TILE_SIZE	_utils/imgStrip.py	/^TILE_SIZE = TILE_WIDTH * TILE_HEIGHT * NBR_COLOR_CHANNELS$/;"	v
TILE_WIDTH	_utils/img.py	/^TILE_WIDTH            =  8$/;"	v
TILE_WIDTH	_utils/imgStrip.py	/^TILE_WIDTH            =  8$/;"	v
TINFL_BITBUF_SIZE	src/botox/data.c	493;"	d	file:
TINFL_BITBUF_SIZE	src/botox/data.c	496;"	d	file:
TINFL_CR_BEGIN	src/botox/data.c	542;"	d	file:
TINFL_CR_FINISH	src/botox/data.c	545;"	d	file:
TINFL_CR_RETURN	src/botox/data.c	543;"	d	file:
TINFL_CR_RETURN_FOREVER	src/botox/data.c	544;"	d	file:
TINFL_DECOMPRESS_MEM_TO_MEM_FAILED	src/botox/data.c	442;"	d	file:
TINFL_FAST_LOOKUP_BITS	src/botox/data.c	/^  TINFL_FAST_LOOKUP_BITS = 10, TINFL_FAST_LOOKUP_SIZE = 1 << TINFL_FAST_LOOKUP_BITS$/;"	e	enum:__anon32	file:
TINFL_FAST_LOOKUP_SIZE	src/botox/data.c	/^  TINFL_FAST_LOOKUP_BITS = 10, TINFL_FAST_LOOKUP_SIZE = 1 << TINFL_FAST_LOOKUP_BITS$/;"	e	enum:__anon32	file:
TINFL_FLAG_COMPUTE_ADLER32	src/botox/data.c	/^  TINFL_FLAG_COMPUTE_ADLER32 = 8$/;"	e	enum:__anon30	file:
TINFL_FLAG_HAS_MORE_INPUT	src/botox/data.c	/^  TINFL_FLAG_HAS_MORE_INPUT = 2,$/;"	e	enum:__anon30	file:
TINFL_FLAG_PARSE_ZLIB_HEADER	src/botox/data.c	/^  TINFL_FLAG_PARSE_ZLIB_HEADER = 1,$/;"	e	enum:__anon30	file:
TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF	src/botox/data.c	/^  TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF = 4,$/;"	e	enum:__anon30	file:
TINFL_GET_BITS	src/botox/data.c	567;"	d	file:
TINFL_GET_BYTE	src/botox/data.c	549;"	d	file:
TINFL_HEADER_INCLUDED	src/botox/data.c	389;"	d	file:
TINFL_HUFF_BITBUF_FILL	src/botox/data.c	573;"	d	file:
TINFL_HUFF_DECODE	src/botox/data.c	592;"	d	file:
TINFL_LZ_DICT_SIZE	src/botox/data.c	453;"	d	file:
TINFL_MAX_HUFF_SYMBOLS_0	src/botox/data.c	/^  TINFL_MAX_HUFF_TABLES = 3, TINFL_MAX_HUFF_SYMBOLS_0 = 288, TINFL_MAX_HUFF_SYMBOLS_1 = 32, TINFL_MAX_HUFF_SYMBOLS_2 = 19,$/;"	e	enum:__anon32	file:
TINFL_MAX_HUFF_SYMBOLS_1	src/botox/data.c	/^  TINFL_MAX_HUFF_TABLES = 3, TINFL_MAX_HUFF_SYMBOLS_0 = 288, TINFL_MAX_HUFF_SYMBOLS_1 = 32, TINFL_MAX_HUFF_SYMBOLS_2 = 19,$/;"	e	enum:__anon32	file:
TINFL_MAX_HUFF_SYMBOLS_2	src/botox/data.c	/^  TINFL_MAX_HUFF_TABLES = 3, TINFL_MAX_HUFF_SYMBOLS_0 = 288, TINFL_MAX_HUFF_SYMBOLS_1 = 32, TINFL_MAX_HUFF_SYMBOLS_2 = 19,$/;"	e	enum:__anon32	file:
TINFL_MAX_HUFF_TABLES	src/botox/data.c	/^  TINFL_MAX_HUFF_TABLES = 3, TINFL_MAX_HUFF_SYMBOLS_0 = 288, TINFL_MAX_HUFF_SYMBOLS_1 = 32, TINFL_MAX_HUFF_SYMBOLS_2 = 19,$/;"	e	enum:__anon32	file:
TINFL_MEMCPY	src/botox/data.c	539;"	d	file:
TINFL_MEMSET	src/botox/data.c	540;"	d	file:
TINFL_NEED_BITS	src/botox/data.c	565;"	d	file:
TINFL_SKIP_BITS	src/botox/data.c	566;"	d	file:
TINFL_STATUS_ADLER32_MISMATCH	src/botox/data.c	/^  TINFL_STATUS_ADLER32_MISMATCH = -2,$/;"	e	enum:__anon31	file:
TINFL_STATUS_BAD_PARAM	src/botox/data.c	/^  TINFL_STATUS_BAD_PARAM = -3,$/;"	e	enum:__anon31	file:
TINFL_STATUS_DONE	src/botox/data.c	/^  TINFL_STATUS_DONE = 0,$/;"	e	enum:__anon31	file:
TINFL_STATUS_FAILED	src/botox/data.c	/^  TINFL_STATUS_FAILED = -1,$/;"	e	enum:__anon31	file:
TINFL_STATUS_HAS_MORE_OUTPUT	src/botox/data.c	/^  TINFL_STATUS_HAS_MORE_OUTPUT = 2$/;"	e	enum:__anon31	file:
TINFL_STATUS_NEEDS_MORE_INPUT	src/botox/data.c	/^  TINFL_STATUS_NEEDS_MORE_INPUT = 1,$/;"	e	enum:__anon31	file:
TINFL_USE_64BIT_BITBUF	src/botox/data.c	488;"	d	file:
Test	game/biome/seed/genome/blackboard/mb.c	/^} Test;$/;"	t	typeref:struct:__anon1	file:
Texture_	src/engine/include/jbInterface.h	8;"	d
U16	src/botox/include/data.h	/^typedef unsigned short U16;$/;"	t
U32	src/botox/include/data.h	/^typedef unsigned int U32;$/;"	t
U8	src/botox/include/data.h	/^typedef unsigned char U8;$/;"	t
Window_	src/engine/include/jbInterface.h	9;"	d
XClrFP	src/botox/include/x.h	/^typedef Error (*XClrFP)(struct _System *sP);$/;"	t
XClrFuncDef_	src/botox/include/x.h	59;"	d
XControl	src/xBuiltins/include/xControl.h	/^} XControl;$/;"	t	typeref:struct:__anon4
XControlComp	src/xBuiltins/include/xControl.h	/^} XControlComp;$/;"	t	typeref:struct:__anon3
XControlFocusID	src/xBuiltins/include/xControl.h	/^} XControlFocusID;$/;"	t	typeref:enum:__anon2
XGetShareFP	src/botox/include/x.h	/^typedef Error (*XGetShareFP)(struct _System *sP, Map *shareMMP);$/;"	t
XGetShareFuncDefUnused_	src/botox/include/x.h	61;"	d
XGetShareFuncDef_	src/botox/include/x.h	66;"	d
XGetShareFuncDef_	src/xBuiltins/xRender.c	/^XGetShareFuncDef_(Render) {$/;"	f
XGo	src/framework/include/xGo.h	/^} XGo;$/;"	t	typeref:struct:__anon21
XGoComp	src/framework/include/xGo.h	/^} XGoComp;$/;"	t	typeref:struct:__anon17
XGoIniSeed	src/framework/include/xGo.h	/^} XGoIniSeed;$/;"	t	typeref:struct:__anon19
XGoIniSeedPkg	src/framework/include/xGo.h	/^} XGoIniSeedPkg;$/;"	t	typeref:struct:__anon20
XHeader	src/botox/include/x.h	/^} XHeader;$/;"	t	typeref:struct:__anon48
XHistoElem	src/framework/xMain.c	/^} XHistoElem;$/;"	t	typeref:struct:__anon13	file:
XIniCompFP	src/botox/include/x.h	/^typedef Error (*XIniCompFP)(struct _System *sP, XHeader *xhP);$/;"	t
XIniCompFuncDef_	src/botox/include/x.h	58;"	d
XIniSFP	src/botox/include/x.h	/^typedef Error (*XIniSFP)(struct _System *sP, void* sParamsP);$/;"	t
XIniSysFuncDef_	src/botox/include/x.h	57;"	d
XMAIN_	src/framework/include/xMain.h	2;"	d
XMain	src/framework/include/xMain.h	/^} XMain;$/;"	t	typeref:struct:__anon29
XMainComp	src/framework/include/xMain.h	/^typedef System XMainComp;$/;"	t
XMainIniSysPrms	src/framework/include/xMain.h	/^} XMainIniSysPrms;$/;"	t	typeref:struct:__anon28
XProcMsgFP	src/botox/include/x.h	/^typedef Error (*XProcMsgFP)(struct _System *sP, Message *messageP);$/;"	t
XProcMsgFuncDef_	src/botox/include/x.h	60;"	d
XRENDER	src/xBuiltins/include/xRender.h	/^	XRENDER = 1$/;"	e	enum:__anon5
XRender	src/xBuiltins/include/xRender.h	/^} XRender;$/;"	t	typeref:struct:__anon12
XRenderComp	src/xBuiltins/include/xRender.h	/^} XRenderComp;$/;"	t	typeref:struct:__anon11
XRenderFocusID	src/xBuiltins/include/xRender.h	/^} XRenderFocusID;$/;"	t	typeref:enum:__anon5
XRenderPresentFP	src/xBuiltins/include/xRender.h	/^typedef void (*XRenderPresentFP)(Renderer_ *rendererP);$/;"	t
X_	src/botox/include/x.h	12;"	d
X_DIR	Makefile	/^X_DIR            = $(SRC_DIR)xBuiltins\/$/;"	m
X_GO	src/framework/include/xGo.h	2;"	d
X_H	src/botox/include/x.h	2;"	d
X_INCLUDES	Makefile	/^X_INCLUDES         = $(X_INC_DIR)*.h$/;"	m
X_INC_DIR	Makefile	/^X_INC_DIR         = $(X_DIR)include\/$/;"	m
X_OBJS	Makefile	/^X_OBJS   = $(X_SRC:%.c=%.o)$/;"	m
X_SRC	Makefile	/^X_SRC         = $(shell find $(X_DIR) -name "*.c") $/;"	m
_Focus	src/botox/include/x.h	/^typedef struct _Focus {$/;"	s
_System	src/botox/include/x.h	/^typedef struct _System {$/;"	s
__init__	_utils/img.py	/^    def __init__(self, blit_coords, frame_order, durations, repeat):$/;"	m	class:AnimSequence
__init__	_utils/img.py	/^    def __init__(self, name, cmpLen, decompLen, cmpData):$/;"	m	class:Inflatable
__init__	_utils/imgStrip.py	/^    def __init__(self, nBytes, pitch, bpp, idxFlipA, idxA):$/;"	m	class:StripMap
__init__	_utils/imgStrip.py	/^    def __init__(self, name, cmpLen, decompLen, cmpData):$/;"	m	class:Inflatable
_arrayGetVoidElemPtr	src/botox/data.c	/^inline static void* _arrayGetVoidElemPtr(const void *arryP, S32 idx) {$/;"	f	file:
_cmClr	src/xBuiltins/xRender.c	/^void _cmClr(Colormap *cmP) {$/;"	f
_cmGen	src/xBuiltins/xRender.c	/^Error _cmGen(Colormap *cmP) {$/;"	f
_countBits	src/botox/data.c	/^inline static U8 _countBits(Key bitfield) {$/;"	f	file:
_countNodes	src/botox/bt.c	/^static U16 _countNodes(Node *rootP, Node *startFromNodeP) {$/;"	f	file:
_countSpecificNodes	src/botox/bt.c	/^static U16 _countSpecificNodes(Node *rootP, Node *startFromNodeP, NodeCb nodeCb) {$/;"	f	file:
_countSrcNodes	src/botox/bt.c	/^static U16 _countSrcNodes(SrcNode *nodeP) {$/;"	f	file:
_distributeGenes	src/framework/xMain.c	/^static Error _distributeGenes(XMain *xMainSysP, Key nSystemsMax) {$/;"	f	file:
_distributeHiveMinds	src/framework/xGo.c	/^static Error _distributeHiveMinds(XGo *xGoSysP, XGoIniSeedPkg *seedPkgP) {$/;"	f	file:
_distributePersonalities	src/framework/xMain.c	/^static Error _distributePersonalities(XMain *xMainSysP) {$/;"	f	file:
_elemSz	src/botox/include/data.h	/^	Key        _elemSz;$/;"	m	struct:__anon44
_elemSz	src/botox/include/data.h	/^	U32         _elemSz;$/;"	m	struct:__anon40
_enum	src/botox/include/data.h	/^	Key _enum;$/;"	m	struct:__anon39
_fast_arrayGetElemSz	src/botox/data.c	/^static inline U32 _fast_arrayGetElemSz(const void *arryP) {$/;"	f	file:
_fast_arrayGetVoidElemPtr	src/botox/data.c	/^static inline void* _fast_arrayGetVoidElemPtr(const void *arryP, U8 idx) {$/;"	f	file:
_getCompLocation	src/botox/x.c	/^inline static CompLocation* _getCompLocation(System *sP, Entity entity) {$/;"	f	file:
_getCompPByIdx	src/botox/x.c	/^inline static void* _getCompPByIdx(Focus *fP, U8 compIdx) {$/;"	f	file:
_getE	src/botox/x.c	/^inline static Entity _getE(const void *cmpP) {$/;"	f	file:
_getElemIdx	src/botox/data.c	/^inline static U32 _getElemIdx(const FlagInfo f, const Key key) {$/;"	f	file:
_getElemP	src/botox/data.c	/^inline static void* _getElemP(const Map *mapP, const FlagInfo f, const Key key) {$/;"	f	file:
_getFlagInfo	src/botox/data.c	/^inline static FlagInfo _getFlagInfo(const Map *mapP, const Key key) {$/;"	f	file:
_getFocusLocation	src/botox/x.c	/^inline static FocusLocation* _getFocusLocation(System *sP, Key focusID) {$/;"	f	file:
_getMapElemSz	src/botox/data.c	/^inline static U32 _getMapElemSz(const Map *mapP) {$/;"	f	file:
_getNBitsSet	src/botox/data.c	/^inline static U32 _getNBitsSet(const Map *mapP) {$/;"	f	file:
_histoGeneTypes	src/framework/xMain.c	/^static Error _histoGeneTypes(GeneHisto *geneHistoP, Biome *biomeP) {$/;"	f	file:
_histoHiveMindTriggers	src/framework/xGo.c	/^static Error _histoHiveMindTriggers(U32 **histoAP, XGoIniSeedPkg *seedPkgP, U32 *totalDistinctHiveMindsP) {$/;"	f	file:
_idxIsPopulated	src/botox/data.c	/^inline static U8 _idxIsPopulated(const U32 nBitsSet, U32 idx) {$/;"	f	file:
_iniCondKeys	src/botox/bt.c	/^static Error _iniCondKeys(Node *rootP, Node *startFromNodeP, NodeCb nodeCb, Map *mapP) {$/;"	f	file:
_isFlagSet	src/botox/data.c	/^inline static U8 _isFlagSet(const U8 flags, const Key key) {$/;"	f	file:
_isHigherPriority	src/framework/xGo.c	/^inline static U8 _isHigherPriority(U8 newPriority, U8 existingPriority) {$/;"	f	file:
_isKeyValid	src/botox/data.c	/^inline static U8 _isKeyValid(const Key key) {$/;"	f	file:
_isMapValid	src/botox/data.c	/^inline static U8 _isMapValid(const Map *mapP) {$/;"	f	file:
_mvC	src/botox/x.c	/^static Error _mvC(System *sP, void *srcCP, void *dstCP, Key dstFocusID, U8 dstCIdx) {$/;"	f	file:
_mvFocus	src/botox/x.c	/^static Error _mvFocus(Focus *srcFocusP, U8 dstFocusIdx) {$/;"	f	file:
_nEnumValPairs	src/botox/include/data.h	/^	U32         _nEnumValPairs;$/;"	m	struct:__anon40
_nKeyValPairs	src/botox/include/data.h	/^	Key        _nKeyValPairs;$/;"	m	struct:__anon44
_nodePush	src/botox/bt.c	/^static void _nodePush(SrcNode *srcNodeP, Node *rootP, U8 *nextAvailIdxP) {$/;"	f	file:
_padding_	src/framework/include/xMain.h	/^	U8 _padding_;$/;"	m	struct:__anon23
_swapFocuses	src/botox/x.c	/^static Error _swapFocuses(Focus *fP, U8 dstFocusIdx) {$/;"	f	file:
_triggerHiveMind	src/framework/xGo.c	/^static Error _triggerHiveMind(XGo *xGoSysP, Message *msgP) {$/;"	f	file:
_triggerIndividual	src/framework/xGo.c	/^static Error _triggerIndividual(XGo *xGoSysP, Message *msgP) {$/;"	f	file:
_updateCompLocation	src/botox/x.c	/^static Error  _updateCompLocation(System *sP, Entity entity, U8 dstFocusID, U8 dstCIdx, void *dstCP) {$/;"	f	file:
_updateFocusLocation	src/botox/x.c	/^static Error _updateFocusLocation(System *sP, Key focusID, U8 dstFocusIdx, Focus *dstFocusP) {$/;"	f	file:
_validateFocusIdx	src/botox/x.c	/^inline static U8 _validateFocusIdx(const System *sP, const U8 focusIdx) { $/;"	f	file:
_xClrFocuses	src/botox/x.c	/^static void _xClrFocuses(System *sP) {$/;"	f	file:
_xReadInbox	src/botox/x.c	/^void _xReadInbox(System *sP) {$/;"	f
_xReadMessage	src/botox/x.c	/^static void _xReadMessage(System *sP, Message *msgP) {$/;"	f	file:
agentBbMP	src/botox/include/bt.h	/^  Map      *agentBbMP;     \/\/ maps an enum'd state name to a void pointer. Anything truly global should be accessed directly.$/;"	m	struct:__anon36
arrayDel	src/botox/data.c	/^void arrayDel(void **arryPP) {$/;"	f
arrayGetElemSz	src/botox/data.c	/^U32 arrayGetElemSz(const void *arryP) {$/;"	f
arrayGetNElems	src/botox/data.c	/^U32 arrayGetNElems(const void *arryP) {$/;"	f
arrayGetVoidElemPtr	src/botox/data.c	/^void* arrayGetVoidElemPtr(const void *arryP, S32 idx) {$/;"	f
arrayIni	src/botox/data.c	/^Error arrayIni(void **arryPP, HardCodedArray *hcaP) {$/;"	f
arrayIniPtrs	src/botox/data.c	/^void arrayIniPtrs(const void *arryP, void **startP, void **endP, S32 endIdx) {$/;"	f
arrayNew	src/botox/data.c	/^Error arrayNew(void **arryPP, U32 elemSz, U32 nElems) {$/;"	f
arrayP	src/botox/include/data.h	/^	void        *arrayP;       \/\/ defaults to NULL to prevent copies $/;"	m	struct:__anon40
arraySetVoidElem	src/botox/data.c	/^Error arraySetVoidElem(void *arrayP, U32 idx, const void *elemSrcompP) {$/;"	f
attn	src/botox/include/data.h	/^	Key attn;   \/\/ e.g. motion system's translate focus$/;"	m	struct:__anon46
bTreeMPA	src/framework/include/xGo.h	/^	Map        **bTreeMPA;$/;"	m	struct:__anon21
bbDel	src/botox/bt.c	/^void bbDel(Blackboard **bbPP) {$/;"	f
bbIdx	src/framework/include/xGo.h	/^	Key bbIdx;$/;"	m	struct:__anon17
bbNew	src/botox/bt.c	/^Error bbNew(Blackboard **bbPP, Node *rootP, Key ownerId, BBSeed *bbSeedP) {$/;"	f
bbP	src/framework/include/xGo.h	/^	Blackboard *bbP;  \/\/ Why array of pointers and not BBs themselves? Because btRun() takes Blackboard*.$/;"	m	struct:__anon19
bbPA	src/framework/include/xGo.h	/^	Blackboard **bbPA;$/;"	m	struct:__anon21
biggerCM	game/biome/seed/genome/ecs_component/Image/ColorMap/biggerCM.c	/^Colormap biggerCM = {$/;"	v
biggerColorSet	game/biome/seed/genome/ecs_component/Image/ColorPalette/biggerCP.c	/^SDL_Color_ biggerColorSet[] = { {0x11, 0x00, 0x00, 0x00},  {0xFF, 0xf0, 0xf0, 0xFF},	{0x0F, 0x00, 0x00, 0xFF},  {0x35, 0x46, 0x00, 0xFF},$/;"	v
biggerImg	game/biome/seed/genome/ecs_component/Image/biggerImg.c	/^Image biggerImg = {$/;"	v
biggerStripMap	game/biome/seed/genome/ecs_component/Image/StripMap/biggerStripMap.c	/^StripMap biggerStripMap = {$/;"	v
biggerStripMapInf	game/biome/seed/genome/ecs_component/Image/StripMap/biggerStripMap.c	/^Inflatable biggerStripMapInf = {$/;"	v
biggerStripSet	game/biome/seed/genome/ecs_component/Image/StripSet/biggerStripSet.c	/^StripSet biggerStripSet = {$/;"	v
biggerStripSetInf	game/biome/seed/genome/ecs_component/Image/StripSet/biggerStripSet.c	/^Inflatable biggerStripSetInf = {$/;"	v
biggerXRenderC	game/biome/seed/genome/ecs_component/Image/biggerImg.c	/^XRenderC biggerXRenderC = {$/;"	v
biomeP	src/framework/include/xMain.h	/^	Biome *biomeP;$/;"	m	struct:__anon27
biomeP	src/framework/include/xMain.h	/^	Biome *biomeP;$/;"	m	struct:__anon28
biomeP	src/framework/include/xMain.h	/^	Biome *biomeP;$/;"	m	struct:__anon29
bitFlagLUT	_utils/bitFlagLUT.h	/^Uint8 bitFlagLUT[] = {$/;"	v
bitFlag_	src/botox/data.c	4;"	d	file:
bitMaskLUT	_utils/bitMaskLUT.h	/^Uint8 bitMaskLUT[] = {$/;"	v
bpp	src/xBuiltins/include/xRender.h	/^	U8 bpp;$/;"	m	struct:__anon9
btCondition	src/botox/include/bt.h	/^NodeFuncDef_(btCondition);   \/\/ easy-to-check condition (e.g. world state)$/;"	v
btDel	src/botox/bt.c	/^void btDel(BTree **treePP) {$/;"	f
btNew	src/botox/bt.c	/^Error btNew(SrcNode *srcNodeP, BTree **treePP) {$/;"	f
btP	src/framework/include/xGo.h	/^	BTree *btP;$/;"	m	struct:__anon17
btP	src/framework/include/xGo.h	/^	BTree *btP;$/;"	m	struct:__anon18
btRun	src/botox/bt.c	/^NodeStat btRun(BTree *treeP, Blackboard *bbP, Mailbox *outboxP) {$/;"	f
btSDel	src/botox/bt.c	/^void btSDel(BTreeSingleton **btSPP) {$/;"	f
btSelector	src/botox/include/bt.h	/^NodeFuncDef_(btSelector);$/;"	v
btSequence	src/botox/include/bt.h	/^NodeFuncDef_(btSequence);$/;"	v
btXCondition	src/botox/include/bt.h	/^NodeFuncDef_(btXCondition);  \/\/ ECS-based condition$/;"	v
buttonsDown	src/xBuiltins/include/xControl.h	/^	U32 buttonsDown;$/;"	m	struct:__anon3
buttonsPressed	src/xBuiltins/include/xControl.h	/^	U32 buttonsPressed;$/;"	m	struct:__anon4
buttonsPressed	src/xBuiltins/xControl.c	/^U32 buttonsPressed;$/;"	v
byteIdxLUT	_utils/byteIdx.h	/^Uint8 byteIdxLUT[] = {$/;"	v
byteIdx_	src/botox/data.c	3;"	d	file:
calcExpDeflatedNBytes	_utils/img.py	/^def calcExpDeflatedNBytes(w, h, bpp):$/;"	f
calcExpDeflatedNBytes	_utils/imgStrip.py	/^def calcExpDeflatedNBytes(w, h, bpp):$/;"	f
cap	_utils/jb_db.py	/^def cap(string):$/;"	f
cbIdx	src/botox/include/x.h	/^  Bln    cbIdx;                 \/\/ index to FP instead of FP itself to prevent external functions$/;"	m	struct:__anon51
checkA	src/botox/include/x.h	/^  Check *checkA;$/;"	m	struct:__anon52
checkIdx	src/botox/include/x.h	/^  Key checkIdx;  \/\/ index of check$/;"	m	struct:__anon49
checkers	src/botox/include/x.h	/^  Checkers     checkers;            \/* Array of checks; similar to Focus without exlusive C-access *\/$/;"	m	struct:_System
childrenPA	src/botox/include/bt.h	/^  struct SrcNode **childrenPA;$/;"	m	struct:SrcNode	typeref:struct:SrcNode::SrcNode
clean_media_file	_utils/jb_media.py	/^def clean_media_file():$/;"	f
clearScreen	src/engine/jbInterface.c	/^void clearScreen(Renderer_ *rendererP) {$/;"	f
colorA	src/xBuiltins/include/xRender.h	/^	Color_ *colorA;$/;"	m	struct:__anon10
colorMapP	src/xBuiltins/include/xRender.h	/^	Colormap *colorMapP;$/;"	m	struct:__anon10
compA	src/botox/include/x.h	/^  void *compA;         \/* components the above function operates on *\/$/;"	m	struct:_Focus
compDirectoryP	src/botox/include/x.h	/^  Map         *compDirectoryP;      \/* maps component IDs to an element in an array of CmpAddresses *\/$/;"	m	struct:_System
compIdx	src/botox/include/x.h	/^  Key compIdx;$/;"	m	struct:__anon49
compLocationP	src/botox/include/x.h	/^  struct Complocation *compLocationP;      \/\/ keep tabs on component's location$/;"	m	struct:__anon51	typeref:struct:__anon51::Complocation
compP	src/botox/include/x.h	/^  void *compP; \/* Systems that use pointers to other systems' components may use double pointers to avoid requesting updated info. *\/$/;"	m	struct:__anon49
compSz	src/botox/include/x.h	/^  Key          compSz;              \/* components are the same size in all of this system's activities *\/$/;"	m	struct:_System
compress_img	_utils/img.py	/^def compress_img(img_name):$/;"	f
compress_img	_utils/imgStrip.py	/^def compress_img(img_name):$/;"	f
compressedData	src/botox/include/data.h	/^	U8  compressedData[];$/;"	m	struct:__anon45
compressedLen	src/botox/include/data.h	/^	U32 compressedLen;$/;"	m	struct:__anon45
condition	src/botox/include/bt.h	/^  U8 condition;       \/\/ bit-flag conditions which must be met to run this node$/;"	m	struct:Node
condition	src/botox/include/bt.h	/^  U8 condition;$/;"	m	struct:SrcNode
conditionA	src/botox/include/bt.h	/^  U8 *conditionA;$/;"	m	struct:NodeA
conditionMP	src/botox/include/bt.h	/^  Map      *conditionMP;  \/\/ maps node indices to U32 condition flags specifically enumerated for the condition node$/;"	m	struct:__anon36
conditionP	src/botox/include/x.h	/^  U8    *conditionP;            \/\/ condition to update through a simple pointer$/;"	m	struct:__anon51
contains	_utils/img.py	/^def contains(container, elem):$/;"	f
contains	_utils/imgStrip.py	/^def contains(container, elem):$/;"	f
convertToRGBHex	_utils/img.py	/^def convertToRGBHex(rgbNPArray):$/;"	f
convertToRGBHex	_utils/imgStrip.py	/^def convertToRGBHex(rgbNPArray):$/;"	f
copy_	src/engine/include/jbInterface.h	13;"	d
count	src/framework/xMain.c	/^	Key count; $/;"	m	struct:__anon13	file:
counter1	_utils/bitCountLUT.py	/^  counter1 = 0$/;"	v
counter2	_utils/bitCountLUT.py	/^  counter2 = 0$/;"	v
create_anim_map	_utils/img.py	/^def create_anim_map(img_name):$/;"	f
create_enum	_utils/jb_enum.py	/^def create_enum(enum_nm):$/;"	f
create_enum_file	_utils/jb_enum.py	/^def create_enum_file():$/;"	f
create_media_file	_utils/jb_media.py	/^def create_media_file():$/;"	f
create_tbl	_utils/jb_db.py	/^def create_tbl(tbl_name):$/;"	f
ctrlListen	src/xBuiltins/xControl.c	/^Error ctrlListen(Focus *fP) {$/;"	f
dataP	src/xBuiltins/include/xRender.h	/^	U8 *dataP;    \/\/ JB only supports 8-bit colormap. If image requires neither strips nor bit-unpacking, this simply points at the inflatable data.$/;"	m	struct:__anon9
def	game/biome/seed/genome/blackboard/mb.c	/^	U16 def;$/;"	m	struct:__anon1	file:
delete	_utils/jb_db.py	/^def delete(tbl_nm, idx=None, condition_str=None):$/;"	f
delete	_utils/jb_media.py	/^def delete(offset, length):$/;"	f
delete_enum	_utils/jb_enum.py	/^def delete_enum(enum_nm):$/;"	f
delete_enum_elem	_utils/jb_enum.py	/^def delete_enum_elem(enum_nm, elem_nm):$/;"	f
delete_record	_utils/jb_media.py	/^def delete_record():$/;"	f
dstRectP	src/xBuiltins/include/xRender.h	/^	Rect_ *dstRectP;$/;"	m	struct:__anon11
dunnoYet	src/framework/include/xMain.h	/^} dunnoYet;$/;"	t	typeref:struct:__anon27
elems_equal	_utils/img.py	/^def elems_equal(a, b):$/;"	f
elems_equal	_utils/imgStrip.py	/^def elems_equal(a, b):$/;"	f
elems_to_enum	_utils/jb_enum.py	/^def elems_to_enum(enum_nm, elems):$/;"	f
ensure_json_exists	_utils/jb_media.py	/^def ensure_json_exists():$/;"	f
entity	src/botox/include/x.h	/^  Entity entity;                \/\/ entity this check regards$/;"	m	struct:__anon51
entity	src/framework/include/xGo.h	/^	Entity entity;$/;"	m	struct:__anon19
enumIndices_	src/botox/include/data.h	24;"	d
enumKeys_	src/botox/include/data.h	23;"	d
enumValA	src/botox/include/data.h	/^	EnumValPair  enumValA[];$/;"	m	struct:__anon40
extract_record_items	_utils/jb_db.py	/^def extract_record_items(record):$/;"	f
f	_utils/bitCountLUT.py	/^f = open("bitCountLUT.h", "w")$/;"	v
find_enum_idx	_utils/jb_enum.py	/^def find_enum_idx(enum_nm):$/;"	f
firstChildIdx	src/botox/include/bt.h	/^  U8 firstChildIdx;$/;"	m	struct:Node
firstChildIdxA	src/botox/include/bt.h	/^  U8 *firstChildIdxA;$/;"	m	struct:NodeA
firstEmptyIdx	src/botox/include/x.h	/^  Key firstEmptyIdx;    \/* marks the first empty element's index *\/$/;"	m	struct:_Focus
firstEmptyIdx	src/botox/include/x.h	/^  Key firstEmptyIdx; \/* marks the first empty element's index *\/$/;"	m	struct:__anon52
firstInactiveActIdx	src/botox/include/x.h	/^  Key          firstInactiveActIdx; \/* index of first inactive focus *\/$/;"	m	struct:_System
firstInactiveIdx	src/botox/include/x.h	/^  Key firstInactiveIdx; \/* marks the first inactive element's index *\/$/;"	m	struct:_Focus
firstInactiveIdx	src/botox/include/x.h	/^  Key firstInactiveIdx; \/* marks the first inactive element's index *\/$/;"	m	struct:__anon52
flagA	src/botox/include/data.h	/^	FlagInfo flagA[N_FLAG_BYTES];  \/\/ "A" means "Array" for JB's naming standards $/;"	m	struct:__anon43
flags	src/botox/include/data.h	/^	Key flags;  $/;"	m	struct:__anon41
flipIdxA	src/xBuiltins/include/xRender.h	/^	U16 flipIdxA[];$/;"	m	struct:__anon6
flipSetP	src/xBuiltins/include/xRender.h	/^	FlipSet *flipSetP;$/;"	m	struct:__anon7
flip_diag	_utils/img.py	/^def flip_diag(np_array):$/;"	f
flip_funcs	_utils/img.py	/^flip_funcs = {FLIP_NONE: flip_none, FLIP_UD: flip_ud, FLIP_LR: flip_lr, FLIP_DIAG: flip_diag}$/;"	v
flip_lr	_utils/img.py	/^flip_lr = np.fliplr$/;"	v
flip_none	_utils/img.py	/^def flip_none(np_array):$/;"	f
flip_ud	_utils/img.py	/^flip_ud = np.flipud$/;"	v
focusA	src/botox/include/x.h	/^  Focus       *focusA;              \/\/ array of individual tasks to focus on. Comps can only be active in one focus at a time.$/;"	m	struct:_System
focusDirectoryP	src/botox/include/x.h	/^  Map         *focusDirectoryP;      \/* maps component IDs to an element in an array of CmpAddresses *\/$/;"	m	struct:_System
focusFP	src/botox/include/x.h	/^  FocusFP focusFP;     \/* function that runs on these components *\/$/;"	m	struct:_Focus
focusID	src/botox/include/x.h	/^  Key focusID;$/;"	m	struct:__anon49
focusIdx	src/botox/include/x.h	/^  Key focusIdx;$/;"	m	struct:__anon50
focusP	src/botox/include/x.h	/^  Focus *focusP; \/* Systems that use pointers to other systems' components may use double pointers to avoid requesting updated info. *\/$/;"	m	struct:__anon50
gen_local_vars_string	_utils/jb_db.py	/^def gen_local_vars_string(tbl_nm, obj):$/;"	f
geneClass	src/framework/include/xMain.h	/^	U8 geneClass;$/;"	m	struct:__anon23
geneClass	src/framework/xMain.c	/^	Key geneClass;$/;"	m	struct:__anon13	file:
genePA	src/framework/include/xMain.h	/^	GeneHeader *genePA[];$/;"	m	struct:__anon24
geneType	src/framework/xMain.c	/^	Key geneType;$/;"	m	struct:__anon13	file:
genomeP	src/framework/include/xMain.h	/^	Genome *genomeP;$/;"	m	struct:__anon25
getKeySymbol_	src/engine/include/jbInterface.h	22;"	d
get_all_local_variables	_utils/jb_db.py	/^def get_all_local_variables(tbl_nm):$/;"	f
get_all_records	_utils/jb_db.py	/^def get_all_records(tbl_nm):$/;"	f
get_color_palette	_utils/img.py	/^def get_color_palette(img):$/;"	f
get_color_palette	_utils/imgStrip.py	/^def get_color_palette(img):$/;"	f
get_enum	_utils/jb_enum.py	/^def get_enum(enum_nm):$/;"	f
get_enum_elems	_utils/jb_enum.py	/^def get_enum_elems(enum_nm):$/;"	f
get_key_mapping	_utils/img.py	/^def get_key_mapping(fn):$/;"	f
get_key_mapping_str	_utils/img.py	/^def get_key_mapping_str(fn, underscore_psns):$/;"	f
get_keymap_psn	_utils/img.py	/^def  get_keymap_psn(filename):$/;"	f
get_keymap_psn	_utils/imgStrip.py	/^def  get_keymap_psn(filename):$/;"	f
get_proper_elem_nm	_utils/jb_enum.py	/^def get_proper_elem_nm(enum_nm, elem_nm):$/;"	f
get_proper_enum_nm	_utils/jb_enum.py	/^def get_proper_enum_nm(nm):$/;"	f
get_tbl	_utils/jb_db.py	/^def get_tbl(tbl_nm):$/;"	f
guiNew	src/engine/jbInterface.c	/^Error guiNew(Window_ **windowPP, Renderer_ **rendererPP) {$/;"	f
h	src/xBuiltins/include/xRender.h	/^	U16 w, h, pitch;  \/\/ in pixel units; determine actual step size by pixel format$/;"	m	struct:__anon9
hcMapDel	src/botox/data.c	/^void hcMapDel(HardCodedMap *hcmP) {$/;"	f
hcMapIni	src/botox/data.c	/^Error hcMapIni(HardCodedMap *hcmP) {$/;"	f
hcMapNew	src/botox/data.c	/^Error hcMapNew(HardCodedMap *hcmP) {$/;"	f
hcmP	src/botox/include/x.h	/^  HardCodedMap *hcmP;  \/\/ Some types of components' values change under various circumstances.$/;"	m	struct:__anon49
hcompArrayIni	src/botox/data.c	/^Error hcompArrayIni(HardCodedArray *hcaP) {$/;"	f
histoDel	src/botox/data.c	/^void histoDel(U32 **histoPP) {$/;"	f
histoNew	src/botox/data.c	/^Error histoNew(U32 **histoPP, const U32 maxVal) {$/;"	f
hiveMindMP	src/framework/include/xGo.h	/^	Map         *hiveMindMP; \/\/ maps triggers to arrays of $/;"	m	struct:__anon21
hp	game/biome/seed/genome/blackboard/mb.c	/^U32 hp = 200;$/;"	v
id	src/botox/include/bt.h	/^	Key       id;$/;"	m	struct:__anon36
id	src/botox/include/x.h	/^  Key          id;                  \/* ID of focus *\/$/;"	m	struct:_System
id	src/botox/include/x.h	/^  Key id;$/;"	m	struct:_Focus
imgP	src/xBuiltins/include/xRender.h	/^	Image *imgP;$/;"	m	struct:__anon11
inboxP	src/botox/include/x.h	/^  Mailbox     *inboxP;               \/* Where commands come in from the outside world *\/$/;"	m	struct:_System
inboxRead	src/botox/include/data.h	/^typedef Error (*inboxRead)(Mailbox *mailboxP);  \/\/ only for self$/;"	t
inflate	src/botox/data.c	/^Error inflate(Inflatable *inflatableP) {$/;"	f
inflatedDataP	src/botox/include/data.h	/^	void *inflatedDataP;$/;"	m	struct:__anon45
inflatedLen	src/botox/include/data.h	/^	U32 inflatedLen;$/;"	m	struct:__anon45
iniColorMap	_utils/img.py	/^def iniColorMap(img):$/;"	f
iniColorMap	_utils/imgStrip.py	/^def iniColorMap(img):$/;"	f
inline	src/botox/include/data.h	21;"	d
insert	_utils/jb_db.py	/^def insert(tbl_nm, obj):$/;"	f
insert	_utils/jb_media.py	/^def insert(data):$/;"	f
insert_enum_elem	_utils/jb_enum.py	/^def insert_enum_elem(enum_nm, elem_nm, idx=-1):   # element does not start with "e_" prefix$/;"	f
insert_record	_utils/jb_media.py	/^def insert_record():$/;"	f
is_animated	_utils/img.py	/^def is_animated(fp):$/;"	f
jbAlloc	src/botox/data.c	/^inline Error jbAlloc(void **voidPP, U32 elemSz, U32 nElems) {$/;"	f
jbFree	src/botox/data.c	/^inline void jbFree(void **voidPP) {$/;"	f
key	src/botox/include/data.h	/^	Key key;$/;"	m	struct:__anon42
keyValA	src/botox/include/data.h	/^	KeyValPair  keyValA[];$/;"	m	struct:__anon44
keyValPairA	src/botox/include/bt.h	/^  KeyValPair *keyValPairA;$/;"	m	struct:__anon35
list_attr_vals	_utils/jb_db.py	/^def list_attr_vals(obj):$/;"	f
list_attributes	_utils/jb_db.py	/^def list_attributes(obj):$/;"	f
local_arry_from_list	_utils/jb_db.py	/^def local_arry_from_list(_list, tbl_nm, attr_name, obj_name):$/;"	f
m_bit_buf	src/botox/data.c	/^  tinfl_bit_buf_t m_bit_buf;$/;"	m	struct:tinfl_decompressor_tag	file:
m_check_adler32	src/botox/data.c	/^  mz_uint32 m_state, m_n_bits, m_zhdr0, m_zhdr1, m_z_adler32, m_final, m_type, m_check_adler32, m_dist, m_counter, m_num_extra, m_table_sizes[TINFL_MAX_HUFF_TABLES];$/;"	m	struct:tinfl_decompressor_tag	file:
m_code_size	src/botox/data.c	/^  mz_uint8 m_code_size[TINFL_MAX_HUFF_SYMBOLS_0];$/;"	m	struct:__anon33	file:
m_counter	src/botox/data.c	/^  mz_uint32 m_state, m_n_bits, m_zhdr0, m_zhdr1, m_z_adler32, m_final, m_type, m_check_adler32, m_dist, m_counter, m_num_extra, m_table_sizes[TINFL_MAX_HUFF_TABLES];$/;"	m	struct:tinfl_decompressor_tag	file:
m_dist	src/botox/data.c	/^  mz_uint32 m_state, m_n_bits, m_zhdr0, m_zhdr1, m_z_adler32, m_final, m_type, m_check_adler32, m_dist, m_counter, m_num_extra, m_table_sizes[TINFL_MAX_HUFF_TABLES];$/;"	m	struct:tinfl_decompressor_tag	file:
m_dist_from_out_buf_start	src/botox/data.c	/^  size_t m_dist_from_out_buf_start;$/;"	m	struct:tinfl_decompressor_tag	file:
m_final	src/botox/data.c	/^  mz_uint32 m_state, m_n_bits, m_zhdr0, m_zhdr1, m_z_adler32, m_final, m_type, m_check_adler32, m_dist, m_counter, m_num_extra, m_table_sizes[TINFL_MAX_HUFF_TABLES];$/;"	m	struct:tinfl_decompressor_tag	file:
m_len_codes	src/botox/data.c	/^  mz_uint8 m_raw_header[4], m_len_codes[TINFL_MAX_HUFF_SYMBOLS_0 + TINFL_MAX_HUFF_SYMBOLS_1 + 137];$/;"	m	struct:tinfl_decompressor_tag	file:
m_look_up	src/botox/data.c	/^  mz_int16 m_look_up[TINFL_FAST_LOOKUP_SIZE], m_tree[TINFL_MAX_HUFF_SYMBOLS_0 * 2];$/;"	m	struct:__anon33	file:
m_n_bits	src/botox/data.c	/^  mz_uint32 m_state, m_n_bits, m_zhdr0, m_zhdr1, m_z_adler32, m_final, m_type, m_check_adler32, m_dist, m_counter, m_num_extra, m_table_sizes[TINFL_MAX_HUFF_TABLES];$/;"	m	struct:tinfl_decompressor_tag	file:
m_num_extra	src/botox/data.c	/^  mz_uint32 m_state, m_n_bits, m_zhdr0, m_zhdr1, m_z_adler32, m_final, m_type, m_check_adler32, m_dist, m_counter, m_num_extra, m_table_sizes[TINFL_MAX_HUFF_TABLES];$/;"	m	struct:tinfl_decompressor_tag	file:
m_raw_header	src/botox/data.c	/^  mz_uint8 m_raw_header[4], m_len_codes[TINFL_MAX_HUFF_SYMBOLS_0 + TINFL_MAX_HUFF_SYMBOLS_1 + 137];$/;"	m	struct:tinfl_decompressor_tag	file:
m_state	src/botox/data.c	/^  mz_uint32 m_state, m_n_bits, m_zhdr0, m_zhdr1, m_z_adler32, m_final, m_type, m_check_adler32, m_dist, m_counter, m_num_extra, m_table_sizes[TINFL_MAX_HUFF_TABLES];$/;"	m	struct:tinfl_decompressor_tag	file:
m_table_sizes	src/botox/data.c	/^  mz_uint32 m_state, m_n_bits, m_zhdr0, m_zhdr1, m_z_adler32, m_final, m_type, m_check_adler32, m_dist, m_counter, m_num_extra, m_table_sizes[TINFL_MAX_HUFF_TABLES];$/;"	m	struct:tinfl_decompressor_tag	file:
m_tables	src/botox/data.c	/^  tinfl_huff_table m_tables[TINFL_MAX_HUFF_TABLES];$/;"	m	struct:tinfl_decompressor_tag	file:
m_tree	src/botox/data.c	/^  mz_int16 m_look_up[TINFL_FAST_LOOKUP_SIZE], m_tree[TINFL_MAX_HUFF_SYMBOLS_0 * 2];$/;"	m	struct:__anon33	file:
m_type	src/botox/data.c	/^  mz_uint32 m_state, m_n_bits, m_zhdr0, m_zhdr1, m_z_adler32, m_final, m_type, m_check_adler32, m_dist, m_counter, m_num_extra, m_table_sizes[TINFL_MAX_HUFF_TABLES];$/;"	m	struct:tinfl_decompressor_tag	file:
m_z_adler32	src/botox/data.c	/^  mz_uint32 m_state, m_n_bits, m_zhdr0, m_zhdr1, m_z_adler32, m_final, m_type, m_check_adler32, m_dist, m_counter, m_num_extra, m_table_sizes[TINFL_MAX_HUFF_TABLES];$/;"	m	struct:tinfl_decompressor_tag	file:
m_zhdr0	src/botox/data.c	/^  mz_uint32 m_state, m_n_bits, m_zhdr0, m_zhdr1, m_z_adler32, m_final, m_type, m_check_adler32, m_dist, m_counter, m_num_extra, m_table_sizes[TINFL_MAX_HUFF_TABLES];$/;"	m	struct:tinfl_decompressor_tag	file:
m_zhdr1	src/botox/data.c	/^  mz_uint32 m_state, m_n_bits, m_zhdr0, m_zhdr1, m_z_adler32, m_final, m_type, m_check_adler32, m_dist, m_counter, m_num_extra, m_table_sizes[TINFL_MAX_HUFF_TABLES];$/;"	m	struct:tinfl_decompressor_tag	file:
mailboxClr	src/botox/data.c	/^void mailboxClr(Mailbox *mailboxP) {$/;"	f
mailboxDel	src/botox/data.c	/^void mailboxDel(Mailbox **mailboxPP) {$/;"	f
mailboxNew	src/botox/data.c	/^Error mailboxNew(Mailbox **mailboxPP, Key ownerID, U16 nSlots) {$/;"	f
mailboxWrite	src/botox/data.c	/^Error mailboxWrite(Mailbox *mailboxP, Key to, Key attn, Key topic, Key msg) {$/;"	f
main	_utils/bitCountLUT.c	/^int main(int argc, char **argv) {$/;"	f
main	_utils/bitCountMaskLUT.c	/^int main(int argc, char **argv) {$/;"	f
main	_utils/bitFlagLUT.c	/^int main(int argc, char **argv) {$/;"	f
main	_utils/byteIdxLUT.c	/^int main(int argc, char **argv) {$/;"	f
main	src/engine/jb.c	/^int main() {$/;"	f
mapA	src/botox/include/data.h	/^	void  *mapA;  $/;"	m	struct:__anon43
mapDel	src/botox/data.c	/^void mapDel(Map **mapPP) {$/;"	f
mapGet	src/botox/data.c	/^extern void* mapGet(const Map *mapP, const Key key) {$/;"	f
mapIni	src/botox/data.c	/^Error mapIni(Map **mapPP, HardCodedMap *hcMapP) {$/;"	f
mapNew	src/botox/data.c	/^Error mapNew(Map **mapPP, const U8 elemSz, const Key nElems) {$/;"	f
mapP	src/botox/include/data.h	/^	Map        *mapP;       \/\/ defaults to NULL to prevent copies $/;"	m	struct:__anon44
mapRem	src/botox/data.c	/^Error mapRem(Map *mapP, const Key key) {$/;"	f
mapSet	src/botox/data.c	/^Error mapSet(Map *mapP, const Key key, const void *valP) {$/;"	f
mapStrips	_utils/imgStrip.py	/^def mapStrips(img):$/;"	f
map_tiles	_utils/img.py	/^def map_tiles(img):$/;"	f
mp	game/biome/seed/genome/blackboard/mb.c	/^U32 mp = 300;$/;"	v
msg	src/botox/include/data.h	/^	Key msg;    \/\/ e.g. move entity 42 with key FAST_LEFT$/;"	m	struct:__anon46
msgA	src/botox/include/data.h	/^  Message *msgA;$/;"	m	struct:__anon47
mz_int16	src/botox/data.c	/^typedef signed short mz_int16;$/;"	t	file:
mz_uint	src/botox/data.c	/^typedef unsigned int mz_uint;$/;"	t	file:
mz_uint16	src/botox/data.c	/^typedef unsigned short mz_uint16;$/;"	t	file:
mz_uint32	src/botox/data.c	/^typedef unsigned int mz_uint32;$/;"	t	file:
mz_uint64	src/botox/data.c	/^typedef unsigned long long mz_uint64;$/;"	t	file:
mz_uint8	src/botox/data.c	/^typedef unsigned char mz_uint8;$/;"	t	file:
nArgs_	src/botox/include/data.h	25;"	d
nBBsSet	src/framework/include/xGo.h	/^	Key          nBBsSet;$/;"	m	struct:__anon21
nChildren	src/botox/include/bt.h	/^  U8 nChildren;$/;"	m	struct:SrcNode
nColors	src/xBuiltins/include/xRender.h	/^	U8 nColors;$/;"	m	struct:__anon10
nDistinctBbs	src/framework/xMain.c	/^  Key nDistinctBbs;$/;"	m	struct:__anon14	file:
nDistinctHivemindQuirks	src/framework/include/xGo.h	/^	Key nDistinctHivemindQuirks;$/;"	m	struct:__anon20
nDistinctIndividualQuirks	src/framework/include/xGo.h	/^	Key nDistinctIndividualQuirks;$/;"	m	struct:__anon20
nDistinctShareds	src/framework/xMain.c	/^  Key nDistinctShareds;$/;"	m	struct:__anon14	file:
nEntities	src/framework/include/xMain.h	/^  U32 nEntities;$/;"	m	struct:__anon26
nFlips	src/xBuiltins/include/xRender.h	/^	U16 nFlips;$/;"	m	struct:__anon6
nFocuses	src/botox/include/x.h	/^  Key          nFocuses;            \/* Number of activities in focusA[] *\/$/;"	m	struct:_System
nGenes	src/framework/include/xMain.h	/^  U8 nGenes;$/;"	m	struct:__anon24
nIndices	src/xBuiltins/include/xRender.h	/^	U16 nIndices;$/;"	m	struct:__anon8
nKeyValPairs	src/botox/include/bt.h	/^  U8 nKeyValPairs;$/;"	m	struct:__anon35
nMsgs	src/botox/include/data.h	/^  U16 nMsgs;$/;"	m	struct:__anon47
nQuirks	src/framework/include/xGo.h	/^	Key nQuirks;$/;"	m	struct:__anon16
nSeeds	src/framework/include/xGo.h	/^	Key nSeeds;$/;"	m	struct:__anon20
nStrips	src/xBuiltins/include/xRender.h	/^	U16 nStrips;    \/\/ number of 64-pixel strips in strip set$/;"	m	struct:__anon7
nSystems	src/framework/include/xMain.h	/^	U8 nSystems;$/;"	m	struct:__anon27
nSystems	src/framework/include/xMain.h	/^	U8 nSystems;$/;"	m	struct:__anon28
nSystemsMax	src/framework/include/xMain.h	/^	U8 nSystemsMax;$/;"	m	struct:__anon27
nSystemsMax	src/framework/include/xMain.h	/^	U8 nSystemsMax;$/;"	m	struct:__anon28
nextSiblingIdx	src/botox/include/bt.h	/^  U8 nextSiblingIdx;  \/\/ allows easy "while(nodeP->nextSibling)" condition-check$/;"	m	struct:Node
nextSiblingIdxA	src/botox/include/bt.h	/^  U8 *nextSiblingIdxA;  \/\/ allows easy "while(nodeP->nextSibling)" condition-check$/;"	m	struct:NodeA
nibble1	_utils/bitCountLUT.py	/^  nibble1 = 0$/;"	v
nibble1	_utils/bitCountLUT.py	/^  nibble1 = max(counter1 - 1, 0);$/;"	v
nibble2	_utils/bitCountLUT.py	/^  nibble2 = 0$/;"	v
nibble2	_utils/bitCountLUT.py	/^  nibble2 = max(counter2 - 1, 0);$/;"	v
nodeCb	src/botox/include/bt.h	/^  NodeCb nodeCb;      \/\/ because nobody points at root @ index 0 as sibling or child$/;"	m	struct:Node
nodeCb	src/botox/include/bt.h	/^  NodeCb nodeCb;$/;"	m	struct:SrcNode
nodeCbA	src/botox/include/bt.h	/^  NodeCb *nodeCbA;      \/\/ because nobody points at root @ index 0 as sibling or child$/;"	m	struct:NodeA
nodeStatA	src/botox/include/bt.h	/^  NodeStat *nodeStatA;  \/\/ tree node's status (complete, failed, running, error, etc.)$/;"	m	struct:__anon36
obj_from_record	_utils/jb_db.py	/^def obj_from_record(object_type, record):$/;"	f
objs_from_records	_utils/jb_db.py	/^def objs_from_records(tbl_nm):$/;"	f
outboxP	src/botox/include/bt.h	/^	Mailbox  *outboxP;$/;"	m	struct:__anon36
outboxP	src/botox/include/x.h	/^  Mailbox     *outboxP;              \/* Where this system talks to the outside world *\/$/;"	m	struct:_System
outboxRead	src/botox/include/data.h	/^typedef Error (*outboxRead)(Mailbox *mailboxP);  \/\/ only of children$/;"	t
outputIfTrue	src/botox/include/x.h	/^  U8     outputIfTrue;          \/\/ condition flag to be OR'd into if true$/;"	m	struct:__anon51
outputStr	_utils/bitCountLUT.py	/^outputStr = ""$/;"	v
owner	src/botox/include/x.h	/^  Entity owner;$/;"	m	struct:__anon48
ownerID	src/botox/include/data.h	/^	Key ownerID;$/;"	m	struct:__anon47
ownerP	src/botox/include/x.h	/^  struct _System *ownerP;$/;"	m	struct:_Focus	typeref:struct:_Focus::_System
packBytes	_utils/img.py	/^def packBytes(tileList, bpp):$/;"	f
packBytes	_utils/imgStrip.py	/^def packBytes(stripList, bpp):$/;"	f
personalityP	src/framework/include/xGo.h	/^	Personality *personalityP;$/;"	m	struct:__anon19
pitch	src/xBuiltins/include/xRender.h	/^	U16 w, h, pitch;  \/\/ in pixel units; determine actual step size by pixel format$/;"	m	struct:__anon9
pollEvent_	src/engine/include/jbInterface.h	17;"	d
preMapSet	src/botox/data.c	/^static Error preMapSet(const Map *mapP, const Key key, void **elemPP, void **nextElemPP, U32 *nBytesTMoveP) {$/;"	f	file:
present_	src/engine/include/jbInterface.h	14;"	d
prevBitCount	src/botox/include/data.h	/^	Key prevBitCount;$/;"	m	struct:__anon41
print_attrs	_utils/jb_db.py	/^def print_attrs(obj):$/;"	f
print_file	_utils/jb_media.py	/^def print_file():$/;"	f
priority	src/framework/include/xGo.h	/^	U8 priority;$/;"	m	struct:__anon15
priority	src/framework/include/xGo.h	/^	U8 priority;$/;"	m	struct:__anon17
priority	src/framework/include/xGo.h	/^	U8 priority;$/;"	m	struct:__anon18
proc_img	_utils/img.py	/^def proc_img(img_name):$/;"	f
proc_img	_utils/imgStrip.py	/^def proc_img(img_name):$/;"	f
query	_utils/jb_db.py	/^def query(tbl_nm, obj):$/;"	f
query_enum_elem	_utils/jb_enum.py	/^def query_enum_elem(elems, elem_nm):$/;"	f
query_media_tbl	_utils/jb_media.py	/^def query_media_tbl(name):$/;"	f
quirkPA	src/framework/include/xGo.h	/^	Quirk **quirkPA;$/;"	m	struct:__anon16
quit_	src/engine/include/jbInterface.h	19;"	d
rank_elems	_utils/img.py	/^def rank_elems(array):$/;"	f
rank_elems	_utils/imgStrip.py	/^def rank_elems(array):$/;"	f
reactionMP	src/framework/include/xMain.h	/^	Personality *reactionMP; $/;"	m	struct:__anon25
read_enum_lines	_utils/jb_enum.py	/^def read_enum_lines():$/;"	f
reconstructImage	_utils/img.py	/^def reconstructImage(colormapTileset, tilemap, colorPalette, imgShape, bpp):$/;"	f
reconstructImage	_utils/imgStrip.py	/^def reconstructImage(stripSet, stripMap, flipList, colorPalette, imgShape, bpp):$/;"	f
record_from_obj	_utils/jb_db.py	/^def record_from_obj(obj):$/;"	f
render	src/xBuiltins/xRender.c	/^Error render(Focus *fP) {$/;"	f
rendererP	src/xBuiltins/include/xRender.h	/^	Renderer_ *rendererP;$/;"	m	struct:__anon12
rle	_utils/img.py	/^def rle(tile):$/;"	f
root	src/botox/include/x.h	/^  Key    root;                  \/\/ root of behavior tree to fire$/;"	m	struct:__anon51
rootP	src/botox/include/bt.h	/^  Node *rootP;$/;"	m	struct:__anon37
rootSrcP	src/botox/include/bt.h	/^	SrcNode *rootSrcP;$/;"	m	struct:__anon38
sClrFP	src/botox/include/x.h	/^  XClrFP       sClrFP;$/;"	m	struct:_System
sGetFocus	src/botox/x.c	/^Focus* sGetFocus(System *sP, Key focusID) {$/;"	f
sGetShareFP	src/botox/include/x.h	/^  XGetShareFP  sGetShareFP;           \/* Some systems' components share pointers to common data. This is how it retrieves them by a parent system's call. *\/$/;"	m	struct:_System
sIniCompFP	src/botox/include/x.h	/^  XIniCompFP   sIniCompFP;             \/* Some systems need to inflate components before using them. *\/$/;"	m	struct:_System
sIniSParamsP	src/botox/include/x.h	/^  void        *sIniSParamsP;        \/* whatever sIniSysFP() needs to properly initialize this system *\/$/;"	m	struct:_System
sIniSysFP	src/botox/include/x.h	/^  XIniSFP      sIniSysFP;             \/* System init function pointer *\/$/;"	m	struct:_System
sProcessMessageFP	src/botox/include/x.h	/^  XProcMsgFP   sProcessMessageFP;   \/* What to do in response to commands in inbox messages. *\/$/;"	m	struct:_System
seedA	src/framework/include/xGo.h	/^	XGoIniSeed *seedA;$/;"	m	struct:__anon20
seedPA	src/framework/include/xMain.h	/^  Seed *seedPA[];$/;"	m	struct:__anon26
sharedMMP	src/framework/include/xMain.h	/^	Map *sharedMMP;         \/\/ map of maps of shared "components"$/;"	m	struct:__anon29
size	src/framework/include/xMain.h	/^	U8 size;$/;"	m	struct:__anon23
size	src/framework/xMain.c	/^	Key size;$/;"	m	struct:__anon13	file:
srcRectP	src/xBuiltins/include/xRender.h	/^	Rect_ *srcRectP;$/;"	m	struct:__anon11
stat	game/biome/seed/genome/blackboard/mb.c	/^	U8 stat;$/;"	m	struct:__anon1	file:
stripMapInfP	src/xBuiltins/include/xRender.h	/^	Inflatable *stripMapInfP;$/;"	m	struct:__anon8
stripMapP	src/xBuiltins/include/xRender.h	/^	StripMap *stripMapP;$/;"	m	struct:__anon9
stripSetInfP	src/xBuiltins/include/xRender.h	/^	Inflatable *stripSetInfP;  \/\/ strip set's compressed source data$/;"	m	struct:__anon7
stripSetP	src/xBuiltins/include/xRender.h	/^	StripSet *stripSetP;$/;"	m	struct:__anon9
surfaceIni	src/engine/jbInterface.c	/^Error surfaceIni(Surface_ *surfaceP, XRenderComp *cP) {$/;"	f
surfaceNew	src/engine/jbInterface.c	/^Error surfaceNew(Surface_ **surfacePP, XRenderComp *cP) {$/;"	f
swapPlaceholderP	src/botox/include/x.h	/^  void        *swapPlaceholderP;    \/* Avoids allocating a new placeholder every EC-swap. *\/$/;"	m	struct:_System
sysPA	src/framework/include/xMain.h	/^	System **sysPA;$/;"	m	struct:__anon27
sysPA	src/framework/include/xMain.h	/^	System **sysPA;$/;"	m	struct:__anon28
system	src/framework/include/xGo.h	/^	System system;$/;"	m	struct:__anon21
system	src/framework/include/xMain.h	/^	System system;$/;"	m	struct:__anon29
system	src/xBuiltins/include/xControl.h	/^	System system;$/;"	m	struct:__anon4
system	src/xBuiltins/include/xRender.h	/^	System system;$/;"	m	struct:__anon12
test	game/biome/seed/genome/blackboard/mb.c	/^Test test = {1, 2, 3};$/;"	v
textureDel	src/engine/jbInterface.c	/^void textureDel(Texture_ **texturePP) {$/;"	f
textureNew	src/engine/jbInterface.c	/^Error textureNew(Texture_ **texturePP, Renderer_ *rendererP, Surface_ *surfaceP) {$/;"	f
textureP	src/xBuiltins/include/xRender.h	/^	Texture_ *textureP;$/;"	m	struct:__anon10
textureSetAlpha	src/engine/jbInterface.c	/^Error textureSetAlpha(Texture_ *textureP) {$/;"	f
thisIdx	src/botox/include/bt.h	/^  U8 thisIdx;         \/\/ allows updating of its own NodeStat and for keying condition map$/;"	m	struct:Node
thisIdxA	src/botox/include/bt.h	/^  U8 *thisIdxA;         \/\/ allows updating of its own NodeStat and for keying condition map$/;"	m	struct:NodeA
throw_underscore_error	_utils/img.py	/^def throw_underscore_error(fn):$/;"	f
tinflIni	src/botox/data.c	467;"	d	file:
tinfl_bit_buf_t	src/botox/data.c	/^  typedef mz_uint32 tinfl_bit_buf_t;$/;"	t	file:
tinfl_bit_buf_t	src/botox/data.c	/^  typedef mz_uint64 tinfl_bit_buf_t;$/;"	t	file:
tinfl_decompress	src/botox/data.c	/^tinfl_status tinfl_decompress(tinfl_decompressor *r, const mz_uint8 *pIn_buf_next, size_t *pIn_buf_size, mz_uint8 *pOut_buf_start, mz_uint8 *pOut_buf_next, size_t *pOut_buf_size, const mz_uint32 decomp_flags)$/;"	f
tinfl_decompress_mem_to_heap	src/botox/data.c	/^void *tinfl_decompress_mem_to_heap(const void *pSrc_buf, size_t src_buf_len, size_t *pOut_len, int flags) {$/;"	f
tinfl_decompressor	src/botox/data.c	/^struct tinfl_decompressor_tag; typedef struct tinfl_decompressor_tag tinfl_decompressor;$/;"	t	typeref:struct:tinfl_decompressor_tag	file:
tinfl_decompressor_tag	src/botox/data.c	/^struct tinfl_decompressor_tag$/;"	s	file:
tinfl_get_adler32	src/botox/data.c	468;"	d	file:
tinfl_huff_table	src/botox/data.c	/^} tinfl_huff_table;$/;"	t	typeref:struct:__anon33	file:
tinfl_put_buf_func_ptr	src/botox/data.c	/^typedef int (*tinfl_put_buf_func_ptr)(const void* pBuf, int len, void *pUser);$/;"	t	file:
tinfl_status	src/botox/data.c	/^} tinfl_status;$/;"	t	typeref:enum:__anon31	file:
tmp	_utils/jb_db.py	/^tmp = JBObject()$/;"	v
to	src/botox/include/data.h	/^	Key to;     \/\/ e.g. motion system$/;"	m	struct:__anon46
toggle	src/botox/include/x.h	/^  Bln    toggle;                \/\/ opposite of toggle is latch, in which case thee condition only needs to have been true once$/;"	m	struct:__anon51
topic	src/botox/include/data.h	/^	Key topic;  \/\/ e.g. this is for entity 42$/;"	m	struct:__anon46
treeP	src/botox/include/bt.h	/^	BTree *treeP;  \/\/ NULL if yet unimplemented.$/;"	m	struct:__anon38
treeSP	src/framework/include/xGo.h	/^	BTreeSingleton *treeSP;$/;"	m	struct:__anon15
trigger	src/framework/include/xGo.h	/^	Key trigger;$/;"	m	struct:__anon15
type	game/biome/seed/genome/blackboard/mb.c	/^	U32 type;$/;"	m	struct:__anon1	file:
type	src/botox/include/x.h	/^  U8 type;$/;"	m	struct:__anon48
type	src/framework/include/xMain.h	/^	U8 type;$/;"	m	struct:__anon23
type_map	_utils/jb_db.py	/^type_map = {"<type 'int'>": int, "<type 'str'>": str, "<type 'instance'>": None}$/;"	v
udpate	_utils/jb_db.py	/^def udpate(tbl_nm, update_str, idx=None, condition_str=None):$/;"	f
unpackBytes	_utils/img.py	/^def unpackBytes(packedBytes, w, h, bpp):$/;"	f
unpackBytes	_utils/imgStrip.py	/^def unpackBytes(packedBytes, bpp):$/;"	f
unused_	src/botox/include/data.h	22;"	d
update	_utils/jb_media.py	/^def update(offset, length, new_data):$/;"	f
update_enum_file	_utils/jb_enum.py	/^def update_enum_file(enum_nm, new_enum):$/;"	f
update_record	_utils/jb_media.py	/^def update_record():$/;"	f
valP	src/botox/include/data.h	/^	void *valP;$/;"	m	struct:__anon39
valueP	src/botox/include/data.h	/^	void *valueP;$/;"	m	struct:__anon42
w	src/xBuiltins/include/xRender.h	/^	U16 w, h, pitch;  \/\/ in pixel units; determine actual step size by pixel format$/;"	m	struct:__anon9
windowP	src/xBuiltins/include/xRender.h	/^	Window_ *windowP;$/;"	m	struct:__anon12
write	_utils/imgStrip.py	/^    def write(self, fp):$/;"	m	class:StripMap
writeInflationData	_utils/img.py	/^    def writeInflationData(self, fp):$/;"	m	class:Inflatable
writeInflationData	_utils/imgStrip.py	/^    def writeInflationData(self, fp, tsDims):$/;"	m	class:Inflatable
write_to_tbl	_utils/jb_db.py	/^def write_to_tbl(tbl_nm, loc_vars_str, objs):$/;"	f
xActivateComp	src/botox/x.c	/^Error xActivateComp(System *sP, Entity entity) {$/;"	f
xActivateFocus	src/botox/x.c	/^Error xActivateFocus(Focus *fP) {$/;"	f
xAddComp	src/botox/x.c	/^Error xAddComp(System *sP, Entity entity, XHeader *xhP) {$/;"	f
xCompIsActive	src/botox/x.c	/^U8 xCompIsActive(System *sP, Entity entity) {$/;"	f
xControlClr	src/xBuiltins/xControl.c	/^Error xControlClr(System *sP) {$/;"	f
xControlIniComp	src/xBuiltins/xControl.c	/^Error xControlIniComp(System *sP, XHeader *xhP) {$/;"	f
xControlIniSys	src/xBuiltins/xControl.c	/^Error xControlIniSys() {$/;"	f
xControlProcessMessage	src/xBuiltins/xControl.c	/^Error xControlProcessMessage(System *sP, Message *msgP) {$/;"	f
xDeactivateComp	src/botox/x.c	/^Error xDeactivateComp(System *sP, Entity entity) {$/;"	f
xDeactivateFocus	src/botox/x.c	/^Error xDeactivateFocus(Focus *fP) {$/;"	f
xGetComp	src/botox/x.c	/^void* xGetComp(System *sP, Entity entity) {$/;"	f
xGetCompMapP	src/botox/x.c	/^Map* xGetCompMapP(System *sP, Entity entity) {$/;"	f
xGetFocusFromE	src/botox/x.c	/^Focus* xGetFocusFromE(System *sP, Entity entity) {$/;"	f
xGetNComponents	src/botox/x.c	/^U32 xGetNComponents(System *sP) {$/;"	f
xGoClr	src/framework/xGo.c	/^void xGoClr(System *sP) {$/;"	f
xGoIniComp	src/framework/xGo.c	/^Error xGoIniComp(System *sP, XGoComp *cP) {$/;"	f
xGoIniSys	src/framework/xGo.c	/^Error xGoIniSys(System *sP, void *sParamsP) {$/;"	f
xGoProcessMessage	src/framework/xGo.c	/^Error xGoProcessMessage(System *sP, Message *msgP) {$/;"	f
xGoRun	src/framework/xGo.c	/^Error xGoRun(Focus *fP) {$/;"	f
xHeader	src/botox/include/x.h	/^  XHeader      xHeader;$/;"	m	struct:_System
xHeader	src/framework/include/xGo.h	/^	XHeader xHeader;$/;"	m	struct:__anon17
xHeader	src/xBuiltins/include/xControl.h	/^	XHeader xHeader;$/;"	m	struct:__anon3
xHeader	src/xBuiltins/include/xRender.h	/^	XHeader xHeader;$/;"	m	struct:__anon11
xIniCompMapP	src/botox/x.c	/^Error xIniCompMapP(System *sP, Entity entity) {$/;"	f
xIniFocus	src/botox/x.c	/^Error xIniFocus(System *sP, Focus *fP, U32 nComps) {$/;"	f
xIniFocusDirectory	src/botox/x.c	/^static Error xIniFocusDirectory(System *sP) {$/;"	f	file:
xIniSys	src/botox/x.c	/^Error xIniSys(System *sP, U32 nComps, void *miscP) {$/;"	f
xMainClr	src/framework/xMain.c	/^Error xMainClr(System *sP) {$/;"	f
xMainIni	src/framework/xMain.c	/^Error xMainIni(XMain **xMainSysPP, System **sPA, U16 nSystems, Key nSystemsMax, Biome *biomeP) {$/;"	f
xMainIniComp	src/framework/xMain.c	/^Error xMainIniComp(System *sP, XHeader *xhP) {$/;"	f
xMainIniSys	src/framework/xMain.c	/^Error xMainIniSys(System *sP, void *sParamsP) {$/;"	f
xMainProcessMessage	src/framework/xMain.c	/^Error xMainProcessMessage(System *sP, Message *msgP) {$/;"	f
xMainRunSystems	src/framework/xMain.c	/^static Error xMainRunSystems(Focus *fP) {$/;"	f	file:
xNewCompDirectory	src/botox/x.c	/^static Error xNewCompDirectory(System *sP, Key nElems) {$/;"	f	file:
xNewFocusDirectory	src/botox/x.c	/^static Error xNewFocusDirectory(System *sP) {$/;"	f	file:
xRenderClr	src/xBuiltins/xRender.c	/^Error xRenderClr(System *sP) {$/;"	f
xRenderIniComp	src/xBuiltins/xRender.c	/^Error xRenderIniComp(System *sP, XHeader *xhP) {$/;"	f
xRenderIniSys	src/xBuiltins/xRender.c	/^Error xRenderIniSys(System *sP, void *sParamsP) {$/;"	f
xRenderProcessMessage	src/xBuiltins/xRender.c	/^Error xRenderProcessMessage(System *sP, Message *msgP) {$/;"	f
xRun	src/botox/x.c	/^Error xRun(System *sP) {$/;"	f
xStartFocus	src/botox/x.c	/^Error xStartFocus(System *sP, Entity entity, Key dstFocusID) {$/;"	f
xheA	src/framework/xMain.c	/^  XHistoElem *xheA;$/;"	m	struct:__anon14	file:
